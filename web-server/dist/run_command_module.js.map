{"version":3,"sources":["webpack:///./web-server/plugins/slycat-run-command/ui.js","webpack:///../dial-a-cluster/plugin/js/dac-ui.js","webpack:///../dial-a-cluster/plugin/js/dac-manage-selections.js","webpack:///../dial-a-cluster/plugin/js/dac-request-data.js","webpack:///../dial-a-cluster/plugin/js/dac-scatter-plot.js","webpack:///../dial-a-cluster/plugin/js/dac-plots.js","webpack:///../dial-a-cluster/plugin/js/dac-table.js","webpack:///../dial-a-cluster/plugin/js/dac-layout.js","webpack:///../dial-a-cluster/plugin/js/dac-alpha-sliders.js","webpack:///../dial-a-cluster/plugin/js/dac-alpha-buttons.js"],"names":["__webpack_require__","test_script_json","scripts","name","parameters","value","hpc","is_hpc_job","wckey","nnodes","partition","ntasks_per_node","time_hours","time_minutes","time_seconds","working_dir","computer_time_series_script_json","timeseries_to_hdf5_script_json","set_command","document","getElementById","_stringify2","default","addEventListener","ugly","$","val","obj","JSON","parse","undefined","e","payload","command","ajax","contentType","type","url","_urijs2","api_root","success","result","error","request","status","reason_phrase","console","log","getResponseHeader","data","client","get_session_status","hostname","message","post_remotes","username","password","response","window","alert","responseJSON","urijs__WEBPACK_IMPORTED_MODULE_10__","urijs__WEBPACK_IMPORTED_MODULE_10___default","n","ready","CONTROL_BAR","MAX_TIME_POINTS","MAX_NUM_PLOTS","MAX_POINTS_ANIMATE","FOCUS_COLOR","SCATTER_PLOT_TYPE","var_include_columns","meta_include_columns","cont_colormap","disc_colormap","mid","location","segment","MAX_PLOT_NAME","MAX_SLIDER_NAME","MAX_COLOR_NAME","endTime","Number","Date","user_scroll","check_preferences","js_slycat_web_client__WEBPACK_IMPORTED_MODULE_0___default","a","get_model","when","_dac_request_data_js__WEBPACK_IMPORTED_MODULE_3__","get_parameters","then","var_include","meta_include","cont_color","disc_color","options","launch_model","ui_parms","ALPHA_STEP","parseFloat","ALPHA_SLIDER_WIDTH","parseInt","ALPHA_BUTTONS_HEIGHT","SCATTER_BORDER","SCATTER_BUTTONS_HEIGHT","POINT_COLOR","POINT_SIZE","NO_SEL_COLOR","SELECTION_1_COLOR","SELECTION_2_COLOR","COLOR_BY_LOW","COLOR_BY_HIGH","OUTLINE_NO_SEL","OUTLINE_SEL","PLOT_ADJUSTMENTS","PLOTS_PULL_DOWN_HEIGHT","PADDING_TOP","PADDING_BOTTOM","PADDING_LEFT","PADDING_RIGHT","X_LABEL_PADDING","Y_LABEL_PADDING","LABEL_OPACITY","X_TICK_FREQ","Y_TICK_FREQ","remove","_dac_layout_js__WEBPACK_IMPORTED_MODULE_2__","setup","body","alpha_values_changed","selections_changed","active_selection_changed","difference_computed","subset_changed","get_table_metadata","get_table","variables_meta","variables","data_table_meta","data_table","i","push","_dac_alpha_sliders_js__WEBPACK_IMPORTED_MODULE_4__","_dac_alpha_buttons_js__WEBPACK_IMPORTED_MODULE_5__","_dac_plots_js__WEBPACK_IMPORTED_MODULE_7__","_dac_scatter_plot_js__WEBPACK_IMPORTED_MODULE_6__","_dac_table_js__WEBPACK_IMPORTED_MODULE_8__","js_slycat_dialog__WEBPACK_IMPORTED_MODULE_1___default","ajax_error","new_alpha_values","set_alpha_values","detail","update","new_selections","_dac_manage_selections_js__WEBPACK_IMPORTED_MODULE_9__","shuffle","update_focus","draw","toggle_difference","update_plots","select_rows","jump_to","active_sel","active_selection","set_focus","diff_values","change_selections","new_subset","update_subset","zoom","reset_zoom","get_alpha_values","length","focus","focusout","poll","get_model_parameter","aid","width","text","error_log","scrollTop","scrollHeight","setTimeout","module","__webpack_exports__","tableid","href","metadata","parmid","get_array_metadata","arrayid","arraynum","get_array","arrays","dimensions","end","CONTROL_BAR_POSITION","layout","applyDefaultStyles","east","size","onresize","_dac_plots_js__WEBPACK_IMPORTED_MODULE_1__","south","height","_dac_table_js__WEBPACK_IMPORTED_MODULE_2__","resize","west","north","_dac_scatter_plot_js__WEBPACK_IMPORTED_MODULE_0__","attr"],"mappings":"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","file":"run_command_module.js","sourcesContent":["import api_root from \"js/slycat-api-root\";\nimport URI from \"urijs\";\nimport client from 'js/slycat-web-client';\n\nvar test_script_json = {\n      \"scripts\": [\n          {\n              \"name\": \"test\",\n              \"parameters\": [\n                  {\n                      \"name\": \"--number\",\n                      \"value\": 2\n                  }\n              ]\n          }\n      ],\n      \"hpc\": {\n          \"is_hpc_job\": false,\n          \"parameters\": {\n              wckey : \"test1\",\n              nnodes : \"1\",\n              partition : \"mypartition\",\n              ntasks_per_node : \"1\",\n              time_hours : \"01\",\n              time_minutes : \"30\",\n              time_seconds : \"30\",\n              working_dir : \"slycat\"\n          }\n      }\n};\n\nvar computer_time_series_script_json = {\n      \"scripts\": [\n          {\n              \"name\": \"compute_timeseries\",\n              \"parameters\": [\n                  {\n                      \"name\": \"--directory\",\n                      \"value\": \"/home/slycat/src/slycat/web-client/500-times-series\"\n                  },\n                  {\n                      \"name\": \"--cluster-sample-count\",\n                      \"value\": 50\n                  },\n                  {\n                      \"name\": \"--cluster-sample-type\",\n                      \"value\": \"uniform-paa\"\n                  },\n                  {\n                      \"name\": \"--cluster-type\",\n                      \"value\": \"average\"\n                  },\n                  {\n                      \"name\": \"--cluster-metric\",\n                      \"value\": \"euclidean\"\n                  },\n                  {\n                      \"name\": \"--workdir\",\n                      \"value\": \"/home/slycat/workdir\"\n                  },\n                  {\n                      \"name\": \"--hash\",\n                      \"value\": \"1a2b3c4d5e6f\"\n                  },\n              ]\n          }\n      ],\n      \"hpc\": {\n          \"is_hpc_job\": false,\n          \"parameters\": {\n              wckey : \"test1\",\n              nnodes : \"1\",\n              partition : \"mypartition\",\n              ntasks_per_node : \"1\",\n              time_hours : \"01\",\n              time_minutes : \"30\",\n              time_seconds : \"30\",\n              working_dir : \"slycat\"\n          }\n      }\n  };\nvar timeseries_to_hdf5_script_json = {\n      \"scripts\": [\n          {\n              \"name\": \"timeseries_to_hdf5\",\n              \"parameters\": [\n                  {\n                      \"name\": \"--output-directory\",\n                      \"value\": \"/home/slycat/output\"\n                  },\n                  {\n                      \"name\": \"--inputs-file\",\n                      \"value\": \"/home/slycat/input\"\n                  },\n                  {\n                      \"name\": \"--inputs-file-delimiter\",\n                      \"value\": \",\"\n                  },\n                  {\n                      \"name\": \"--force\",\n                      \"value\": \"\"\n                  }\n              ]\n          }\n      ],\n      \"hpc\": {\n          \"is_hpc_job\": false,\n          \"parameters\": {\n              wckey : \"test1\",\n              nnodes : \"1\",\n              partition : \"mypartition\",\n              ntasks_per_node : \"1\",\n              time_hours : \"01\",\n              time_minutes : \"30\",\n              time_seconds : \"30\",\n              working_dir : \"slycat\"\n          }\n      }\n  };\nfunction prettyPrint() {\n  try {\n    var ugly = $('#command').val();\n    var obj = JSON.parse(ugly);\n    document.getElementById('command').value = JSON.stringify(obj, undefined, 4);\n\n    var ugly = $('#response').val();\n    var obj = JSON.parse(ugly);\n    document.getElementById('response').value = JSON.stringify(obj, undefined, 4);\n  } catch (e)\n  {\n    // no opp.\n  }\n}\n\nfunction run_remote_command()\n{\n  var payload = {\"command\": JSON.parse($('#command').val())};\n  $.ajax(\n  {\n    contentType: \"application/json\",\n    type: \"POST\",\n    url: URI(api_root + \"remotes/\"+$('#hostname').val()+\"/post-remote-command\"),\n    success: function(result)\n    {\n      document.getElementById('response').value = JSON.stringify(result)\n    },\n    error: function(request, status, reason_phrase)\n    {\n        console.log( \"status:\" + request.status);\n        if(request.status === 400){\n            document.getElementById('response').value = \"status: \" + request.status + \"\\n\\nmessage: \" + request.getResponseHeader('X-Slycat-Message');\n        }else {\n            document.getElementById('response').value = \"error response from server:\\n\" + \"error request:\"\n                + JSON.stringify(request, undefined, 4) + \"\\n\\n status: \" + request.status + \"\\n\\n reason: \" + reason_phrase;\n        }\n    },\n    data: JSON.stringify(payload)\n  });\n\n}\n\nfunction post_session()\n{\n  client.post_remotes({\n    hostname: $('#hostname').val(),\n    username: $('#username').val(),\n    password: $('#password').val(),\n    success: function(response) {\n        document.getElementById('response').value = \"host session made sid:\" + JSON.stringify(response, undefined, 2);\n    },\n    error: function(request, status, reason_phrase) {\n        window.alert(\"error request:\" + request.responseJSON +\" status: \"+ status + \" reason: \" + reason_phrase);\n        console.log(\"error request:\" + request.responseJSON +\" status: \"+ status + \" reason: \" + reason_phrase);\n    }\n  });\n}\n\nfunction get_session() {\n  client.get_session_status(\n    {\n      hostname: $('#hostname').val(),\n      success: function (message) {\n          document.getElementById('response').value = \"host session found\";\n      },\n      error: function (request, status, reason_phrase) {\n          document.getElementById('response').value = \"no session found\";\n          post_session();\n      }\n    }\n  );\n}\nfunction set_command(name){\n    if(name === \"test\"){\n        document.getElementById('command').value = JSON.stringify(test_script_json);\n    }\n    else if(name === \"computer_time_series\"){\n        document.getElementById('command').value = JSON.stringify(computer_time_series_script_json);\n    }\n    else if(name === \"timeseries_to_hdf5\"){\n        document.getElementById('command').value = JSON.stringify(timeseries_to_hdf5_script_json);\n    }\n    else {\n        document.getElementById('command').value = \"command does not match command in list of commands\"\n    }\n}\ndocument.getElementById(\"prettyPrint\").addEventListener(\"click\", prettyPrint, false);\ndocument.getElementById(\"go\").addEventListener(\"click\", run_remote_command, false);\ndocument.getElementById(\"getSession\").addEventListener(\"click\", get_session, false);\ndocument.getElementById(\"test\").addEventListener(\"click\", function(){set_command(\"test\")}, false);\ndocument.getElementById(\"computeTimeSeries\").addEventListener(\"click\", function(){set_command(\"computer_time_series\")}, false);\ndocument.getElementById(\"timeseriesToHdf5\").addEventListener(\"click\", function(){set_command(\"timeseries_to_hdf5\")}, false);","// This script sets up the overall layout of the dial-a-cluster user\n// interface, making calls out to different functions for each of\n// the jQuery windows.\n\n// S. Martin\n// 1/15/2015\n\nimport client from \"js/slycat-web-client\";\nimport dialog from \"js/slycat-dialog\";\nimport layout from \"./dac-layout.js\";\nimport request from \"./dac-request-data.js\";\nimport alpha_sliders from \"./dac-alpha-sliders.js\";\nimport alpha_buttons from \"./dac-alpha-buttons.js\";\nimport scatter_plot from \"./dac-scatter-plot.js\";\nimport plots from \"./dac-plots.js\";\nimport metadata_table from \"./dac-table.js\";\nimport selections from \"./dac-manage-selections.js\";\nimport URI from \"urijs\";\n\n// Wait for document ready\n$(document).ready(function() {\n\n    // controls on top or above scatter plot\n    var CONTROL_BAR = \"scatter-plot\";\n\n    // maximum number of points to display for plots\n    var MAX_TIME_POINTS = 500;\n\n    // maximum number of plots (per selection)\n    var MAX_NUM_PLOTS = 50;\n\n    // animation threshold\n    var MAX_POINTS_ANIMATE = null;\n\n    // focus selection color\n    var FOCUS_COLOR = \"black\";\n\n    // scatter plot points (circles or squares)\n    var SCATTER_PLOT_TYPE = \"circle\";\n\n    // variable/metadata inclusion columns\n    var var_include_columns = null;\n    var meta_include_columns = null;\n\n    // colormap defaults\n    var cont_colormap = null;\n    var disc_colormap = null;\n\n    // model id from address bar\n    var mid = URI(window.location).segment(-1);\n\n    // constants for polling timeouts\n    var ONE_MINUTE = 60000;\n    var ONE_SECOND = 1000;\n\n    // constants for cutting off plot names, slider names\n    var MAX_PLOT_NAME = 20;\n    var MAX_SLIDER_NAME = 20;\n    var MAX_COLOR_NAME = 20;\n\n    // waits 1 minute past last successful progress update\n    var endTime = Number(new Date()) + ONE_MINUTE;\n\n    // polling interval is 1 second\n    var interval = ONE_SECOND;\n\n    // if user is looking at textarea then don't scroll to bottom\n    var user_scroll = false;\n    $(\"#dac_processing_textarea\").focus (function () { user_scroll = true });\n    $(\"#dac_processing_textarea\").focusout(function () { user_scroll = false });\n\n    // poll database for artifact \"dac-poll-progress\"\n    (function poll() {\n\n        client.get_model_parameter(\n        {\n            mid: mid,\n            aid: \"dac-polling-progress\",\n            success: function (result)\n            {\n\n                if (result[0] == \"Done\") {\n\n                    // done uploading to database\n                    check_preferences();\n\n                } else if (result[0] == \"Error\") {\n\n                    dialog.ajax_error (\"Server error: \" + result[1] + \".\")(\"\",\"\",\"\");\n\n                } else {\n\n                    // update progress and output log\n                    $(\"#dac_processing_progress_bar\").width(result[1] + \"%\");\n                    $(\"#dac_processing_progress_bar\").text(result[0]);\n\n                    // request error log\n                    $.when(request.get_parameters(\"dac-parse-log\")).then(\n                        function(error_log)\n                        {\n                            // update text box unless user has focused on it\n                            if (user_scroll == false) {\n                                // display text then scroll to bottom\n                                $(\"#dac_processing_textarea\").text(error_log[1]);\n\n                                // scroll to bottom\n                                $(\"#dac_processing_textarea\").scrollTop($(\"#dac_processing_textarea\")[0].scrollHeight);\n                            }\n                        });\n\n                    // reset time out and continue\n                    endTime = Number(new Date()) + ONE_MINUTE;\n                    window.setTimeout(poll, interval);\n                }\n            },\n            error: function () {\n\n                if (Number(new Date()) < endTime) {\n\n                    // check model for existence of \"dac-polling-progress\" artifact\n                    client.get_model(\n                    {\n                        mid: mid,\n                        success: function (result)\n                        {\n                            // if \"dac-polling-progress\" doesn't exist it's an older model, just load it\n                            if (!(\"artifact:dac-polling-progress\" in result))\n                            {\n                                check_preferences();\n                            } else {\n\n                                // otherwise keep trying, do not reset timer\n                                window.setTimeout(poll, interval);\n\n                            }\n                        },\n                        error: function ()\n                        {\n                            // couldn't even load model? -- give up\n                            check_preferences();\n                        }\n                    });\n\n                } else {\n                    // all else fails -- give up\n                    check_preferences();\n                }\n            }\n        });\n    })();\n\n    // check for preferences, and set up variable\n    function check_preferences ()\n    {\n\n        // get artifacts in model (to see if user has modified preferences\n        client.get_model (\n        {\n            mid: mid,\n            success: function (result)\n            {\n                // check for preference variables\n                if ((\"artifact:dac-var-include-columns\" in result) &&\n                    (\"artifact:dac-metadata-include-columns\" in result) &&\n                    (\"artifact:dac-cont-colormap\" in result) &&\n                    (\"artifact:dac-disc-colormap\" in result) &&\n                    (\"artifact:dac-options\" in result)) {\n\n                    // load preference data\n                    $.when(request.get_parameters(\"dac-var-include-columns\"),\n                           request.get_parameters(\"dac-metadata-include-columns\"),\n                           request.get_parameters(\"dac-cont-colormap\"),\n                           request.get_parameters(\"dac-disc-colormap\"),\n                           request.get_parameters(\"dac-options\")).then(\n                           function (var_include, meta_include, cont_color, disc_color, options) {\n\n                                // set var/meta inclusion\n                                var_include_columns = var_include[0];\n                                meta_include_columns = meta_include[0];\n\n                                // set colormaps\n                                cont_colormap = JSON.parse(cont_color[0][0]);\n                                disc_colormap = JSON.parse(disc_color[0][0]);\n\n                                // set options -- label length\n                                MAX_PLOT_NAME = options[0][0];\n                                MAX_COLOR_NAME = options[0][0];\n                                MAX_SLIDER_NAME = options[0][0];\n\n                                // set options -- plots\n                                MAX_TIME_POINTS = options[0][1];\n                                MAX_NUM_PLOTS = options[0][2];\n\n                                // set options -- animation\n                                MAX_POINTS_ANIMATE = options[0][3];\n\n                                // set options -- scatter plot type\n                                SCATTER_PLOT_TYPE = options[0][4];\n\n                                // set options -- control bar\n                                CONTROL_BAR = options[0][5];\n\n                                // start model\n                                launch_model();\n\n                     });\n\n\n\n                } else {\n\n                    // no preferences found, launch model with defaults\n                    launch_model();\n\n                }\n            },\n            error: function () {\n\n                // couldn't load model -- try to launch anyway (forget about preferences)\n                launch_model();\n\n            }\n        });\n    }\n\n\n    // setup and launch model\n    function launch_model ()\n    {\n\n    \t// load ui parameters and initialize dial-a-cluser layout\n\t    $.when (request.get_parameters(\"dac-ui-parms\")).then(\n\t\t\tfunction (ui_parms)\n\t\t\t{\n\n    \t\t\t// the step size for the alpha slider (varies from 0 to 1)\n    \t\t\tvar ALPHA_STEP = parseFloat(ui_parms[\"ALPHA_STEP\"]);\n\n    \t\t\t// default width for the alpha sliders (in pixels)\n    \t\t\tvar ALPHA_SLIDER_WIDTH = parseInt(ui_parms[\"ALPHA_SLIDER_WIDTH\"]);\n\n    \t\t\t// default height of alpha buttons (in pixels)\n    \t\t\tvar ALPHA_BUTTONS_HEIGHT = parseInt(ui_parms[\"ALPHA_BUTTONS_HEIGHT\"]);\n\n\t\t\t\t// number of points over which to stop animation\n\t\t\t\tif (MAX_POINTS_ANIMATE == null) {\n\t\t\t\t    MAX_POINTS_ANIMATE = parseInt(ui_parms[\"MAX_POINTS_ANIMATE\"]);\n\t\t\t\t};\n\n\t\t\t\t// border around scatter plot (fraction of 1)\n\t\t\t\tvar SCATTER_BORDER = parseFloat(ui_parms[\"SCATTER_BORDER\"]);\n\n\t\t\t\t// scatter button toolbar height\n\t\t\t\tvar SCATTER_BUTTONS_HEIGHT = parseInt(ui_parms[\"SCATTER_BUTTONS_HEIGHT\"]);\n\n\t\t\t\t// scatter plot colors (css/d3 named colors)\n\t\t\t\tvar POINT_COLOR = ui_parms[\"POINT_COLOR\"];\n\t\t\t\tvar POINT_SIZE = parseInt(ui_parms[\"POINT_SIZE\"]);\n\t\t\t\tvar NO_SEL_COLOR = ui_parms[\"NO_SEL_COLOR\"];\n\t\t\t\tvar SELECTION_1_COLOR = ui_parms[\"SELECTION_1_COLOR\"];\n\t\t\t\tvar SELECTION_2_COLOR = ui_parms[\"SELECTION_2_COLOR\"];\n\t\t\t\tvar COLOR_BY_LOW = ui_parms[\"COLOR_BY_LOW\"];\n\t\t\t\tvar COLOR_BY_HIGH = ui_parms[\"COLOR_BY_HIGH\"];\n\t\t\t\tvar OUTLINE_NO_SEL = parseInt(ui_parms[\"OUTLINE_NO_SEL\"]);\n\t\t\t\tvar OUTLINE_SEL = parseInt(ui_parms[\"OUTLINE_SEL\"]);\n\n\t\t\t\t// pixel adjustments for d3 time series plots\n\t\t\t\tvar PLOT_ADJUSTMENTS = {\n\t\t\t\t\tPLOTS_PULL_DOWN_HEIGHT: parseInt(ui_parms[\"PLOTS_PULL_DOWN_HEIGHT\"]),\n\t\t\t\t\tPADDING_TOP: parseInt(ui_parms[\"PADDING_TOP\"]),\n\t\t\t\t\tPADDING_BOTTOM: parseInt(ui_parms[\"PADDING_BOTTOM\"]),\n\t\t\t\t\tPADDING_LEFT: parseInt(ui_parms[\"PADDING_LEFT\"]),\n\t\t\t\t\tPADDING_RIGHT: parseInt(ui_parms[\"PADDING_RIGHT\"]),\n\t\t\t\t\tX_LABEL_PADDING: parseInt(ui_parms[\"X_LABEL_PADDING\"]),\n\t\t\t\t\tY_LABEL_PADDING: parseInt(ui_parms[\"Y_LABEL_PADDING\"]),\n\t\t\t\t\tLABEL_OPACITY: parseFloat(ui_parms[\"LABEL_OPACITY\"]),\n\t\t\t\t\tX_TICK_FREQ: parseInt(ui_parms[\"X_TICK_FREQ\"]),\n\t\t\t\t\tY_TICK_FREQ: parseInt(ui_parms[\"Y_TICK_FREQ\"]),\n\t\t\t\t};\n\n\t            // Remove progress element from DOM\n\t            $('#dac-progress-feedback').remove();\n\n\t            // set up jQuery layout for user interface\n\t\t\t\tlayout.setup (ALPHA_SLIDER_WIDTH, ALPHA_BUTTONS_HEIGHT,\n\t\t\t\t\t\t\t  SCATTER_BUTTONS_HEIGHT, CONTROL_BAR);\n\n                // set up alpha slider value change event\n                document.body.addEventListener(\"DACAlphaValuesChanged\", alpha_values_changed);\n\n                // set up selection change event\n                document.body.addEventListener(\"DACSelectionsChanged\", selections_changed);\n\n                // set up active selection change event\n                document.body.addEventListener(\"DACActiveSelectionChanged\", active_selection_changed);\n\n                // set up difference calculation event\n                document.body.addEventListener(\"DACDifferenceComputed\", difference_computed);\n\n                // set up subset change event\n                document.body.addEventListener(\"DACSubsetChanged\", subset_changed);\n\n                // load all relevant data and set up panels\n                $.when(request.get_table_metadata(\"dac-variables-meta\"),\n\t\t   \t           request.get_table(\"dac-variables-meta\"),\n\t\t   \t           request.get_table_metadata(\"dac-datapoints-meta\"),\n\t\t\t           request.get_table(\"dac-datapoints-meta\")).then(\n\t\t   \t           function (variables_meta, variables, data_table_meta, data_table)\n\t\t   \t                {\n\n                                // change variables included from null to list of indices, if necessary\n                                if (var_include_columns == null) {\n\n                                    var_include_columns = [];\n                                    for (var i = 0; i < variables_meta[0][\"row-count\"]; i++) {\n                                        var_include_columns.push(i);\n                                    }\n                                }\n\n                                // change metadata included from null to list of indices, if necessary\n                                if (meta_include_columns == null) {\n\n                                    meta_include_columns = [];\n                                    for (i = 0; i < data_table_meta[0][\"column-count\"]; i++) {\n                                        meta_include_columns.push(i);\n                                    }\n                                }\n\n\t\t   \t                    // set up the alpha sliders\n\t\t\t\t                alpha_sliders.setup (ALPHA_STEP, variables_meta[0][\"row-count\"],\n\t\t\t\t                                         variables[0][\"data\"][0], MAX_SLIDER_NAME,\n\t\t\t\t                                         var_include_columns);\n\n\t\t\t\t                // set up the alpha buttons\n\t\t\t\t                alpha_buttons.setup (variables_meta[0][\"row-count\"], var_include_columns);\n\n\t\t\t\t                // set up the time series plots\n\t\t\t\t                plots.setup(SELECTION_1_COLOR, SELECTION_2_COLOR, FOCUS_COLOR, PLOT_ADJUSTMENTS,\n\t\t\t\t                            MAX_TIME_POINTS, MAX_NUM_PLOTS, MAX_PLOT_NAME, variables_meta, variables,\n\t\t\t\t                            var_include_columns);\n\n\t\t\t\t                // set up the MDS scatter plot\n\t\t\t\t                scatter_plot.setup(MAX_POINTS_ANIMATE, SCATTER_BORDER, POINT_COLOR,\n\t\t\t\t\t                POINT_SIZE, SCATTER_PLOT_TYPE, NO_SEL_COLOR, SELECTION_1_COLOR,\n\t\t\t\t\t                SELECTION_2_COLOR, FOCUS_COLOR, COLOR_BY_LOW, COLOR_BY_HIGH,\n\t\t\t\t\t                cont_colormap, disc_colormap, MAX_COLOR_NAME, OUTLINE_NO_SEL,\n\t\t\t\t\t                OUTLINE_SEL, data_table_meta[0], meta_include_columns, var_include_columns);\n\n\t\t\t\t                // set up table (propagate selections through to scatter plot)\n\t\t\t\t                metadata_table.setup(data_table_meta, data_table, meta_include_columns);\n\n\t\t   \t                },\n\t\t   \t                function () {\n\t\t   \t                    dialog.ajax_error (\"Server error: could not load initial data.\")(\"\",\"\",\"\");\n\n\t\t   \t                    // remove dac-plots so screen isn't so ugly\n\t\t                        for (var i = 0; i < 3; i++) {\n\t\t                            $(\"#dac-select-plot-\" + (i+1)).remove();\n\t\t                            $(\"#dac-link-plot-\" + (i+1)).remove();\n\t\t                            $(\"#dac-low-resolution-plot-\" + (i+1)).remove();\n\t\t                            $(\"#dac-full-resolution-plot-\" + (i+1)).remove();\n\t\t                            $(\"#dac-link-label-plot-\" + (i+1)).remove();\n\t\t                            $(\"#dac-plots-displayed-\" + (i+1)).remove();\n\t\t                            $(\"#dac-plots-not-displayed-\" + (i+1)).remove();\n\t\t                        };\n\n\t\t   \t                });\n\n\t\t\t},\n\t\t\tfunction ()\n\t\t\t{\n\t\t\t\tdialog.ajax_error (\"Server failure: could not load UI parameters.\")(\"\",\"\",\"\");\n\n\t\t\t\t// remove model leaving only blank screen\n\t\t\t\t$(\"#dac-model\").remove();\n\t\t\t}\n\t    );\n    }\n\n    // custom event for change in alpha slider values\n    function alpha_values_changed (new_alpha_values)\n    {\n        // update actual sliders\n        alpha_sliders.set_alpha_values(new_alpha_values.detail);\n\n        // update MDS scatter plot\n        scatter_plot.update(new_alpha_values.detail);\n    }\n\n    // custom event for change in selection 1, selection 2, active selection\n    function selections_changed (new_selections)\n    {\n\n        // re-order selection order randomly\n        // (to prevent always showing 1st part of long selection)\n        selections.shuffle();\n\n        // update focus since selection changed\n        selections.update_focus();\n\n        // update scatter plot\n        scatter_plot.draw();\n\n        // show difference out of sync\n        scatter_plot.toggle_difference(false);\n\n        // update selections in time series plot\n        plots.update_plots();\n\n\t\t// update table - select corresponding rows (assumes they are stored in manage_selections.js)\n\t\tmetadata_table.select_rows();\n\n\t\t// jump to top row in table for current selection (if there is one)\n\t\tmetadata_table.jump_to (new_selections.detail.active_sel);\n    }\n\n    // custom event for jumping to an individual selection in the table\n    function active_selection_changed (active_selection)\n    {\n        // update new active selection\n        selections.set_focus(active_selection.detail.active_sel);\n\n        // re-draw curves to show active selection\n        plots.draw();\n\n        // highlight in scatter plot\n        scatter_plot.draw();\n\n        // re-draw rows in table\n        metadata_table.select_rows();\n\n        // jump to focus, unless it was a defocus event\n        if (active_selection.detail.active_sel != null) {\n            metadata_table.jump_to ([active_selection.detail.active_sel]);\n        }\n    }\n\n    // custom event for difference calculation\n    function difference_computed (diff_values)\n    {\n        // show first three most different plots\n        plots.change_selections(diff_values.detail);\n    }\n\n    // user changed subset (can change selections as well)\n    function subset_changed (new_subset)\n    {\n        // update subset and selections\n        var jump_to = selections.update_subset (new_subset.detail.new_subset);\n\n        // re-draw curves to show new selections\n        plots.draw();\n\n        // re-draw scatter plot, before updating coordinates\n        scatter_plot.draw();\n\n        // reset zoom, if necessary\n        if (new_subset.detail.zoom) {\n            scatter_plot.reset_zoom();\n        }\n\n        // re-draw scatter plot, subset changed\n        scatter_plot.update(alpha_sliders.get_alpha_values());\n\n        // re-draw rows in table\n        metadata_table.select_rows();\n\n        // jump to either selection or at least subset\n        if (jump_to.length > 0) {\n            metadata_table.jump_to (jump_to);\n        }\n    }\n});","// This function contains code for managing the two selections \n// in dial-a-cluster.  It contains code that is common in between\n// dac-scatter-plot and dac-table for managing the two selections.\n// It also helps keep the selections synchronized between the two\n// ui panes.\n//\n// S. Martin\n// 4/8/2015\n\n() =>\n{\n\t\n\t// public functions will be returned via the module variable\n\tvar module = {};\n\t\n\t// current selections and type (0 = zoom, 1 = selection_1, 2 = selection_2, 3 = subset)\n\tvar curr_sel_type = null;\n\n\t// selections\n\tvar selection_1 = [];\n\tvar selection_2 = [];\n\n    // subset mask\n    var subset_mask = [];\n\n\t// focus selection (index into data, or null if nothing in focus)\n\tvar focus = null;\n\n\t// shift or meta key pressed\n\tvar shift_key_pressed = false;\n\n\t// get selection type\n\tmodule.sel_type = function ()\n\t{\n\t\treturn curr_sel_type;\n\t}\n\t\n\t// set selection type\n\tmodule.set_sel_type = function(new_sel_type)\n\t{\n\t\tcurr_sel_type = new_sel_type;\n\t}\n\t\n\t// get actual selection (#1)\n\tmodule.sel_1 = function()\n\t{\n\t\treturn selection_1;\n\t}\n\t\n\t// get selection #2\n\tmodule.sel_2 = function()\n\t{\n\t\treturn selection_2;\n\t}\n\n    // set subset mask\n    module.update_subset = function(mask)\n    {\n        // set new subset mask\n        subset_mask = mask;\n\n        // remove non-subset items from selection 1, if required\n        var new_sel_1 = [];\n        for (var i = 0; i < selection_1.length; i++) {\n            if (subset_mask[selection_1[i]] == 1) {\n                new_sel_1.push(selection_1[i]);\n            }\n        }\n        selection_1 = new_sel_1;\n\n        // remove non-subset items from selection 2, if necessary\n        var new_sel_2 = [];\n        for (var i = 0; i < selection_2.length; i++) {\n            if (subset_mask[selection_2[i]] == 1) {\n                new_sel_2.push(selection_2[i]);\n            }\n        }\n        selection_2 = new_sel_2;\n\n        // remove focus selection, if necessary\n        if (focus != null) {\n            if (subset_mask[focus] == 0) {\n                focus = null;\n            }\n        }\n\n        // return non-empty selection, if present\n        if (selection_1.length > 0) {\n            return selection_1;\n        } else if (selection_2.length > 0) {\n            return selection_2;\n        } else {\n\n            // otherwise return subset indices\n            var subset_inds = [];\n            for (var i = 0; i < subset_mask.length; i++) {\n                if (subset_mask[i] == 1) {\n                    subset_inds.push(i);\n                }\n            }\n            return subset_inds;\n        }\n    }\n\n    // get subset mask\n    module.get_subset = function()\n    {\n        return subset_mask;\n    }\n\n    // get size of subset\n    module.subset_size = function()\n    {\n        var num_subset = 0;\n        for (var i = 0; i < mds_subset.length; i++) {\n            num_subset = num_subset + mds_subset[i];\n        }\n\n        return num_subset;\n    }\n\n\n\n    // check if an index is in the subset mask\n    module.in_subset = function(i)\n    {\n        return subset_mask[i];\n    }\n\n\t// set focus selection\n\tmodule.set_focus = function(i)\n\t{\n\t    focus = i;\n\t}\n\n\t// get focus selection\n\tmodule.focus = function()\n\t{\n\t    return focus;\n\t}\n\n\t// is index i in selection 1?\n\t// return index or -1 if absent\n\tmodule.in_sel_1 = function(i)\n\t{\n\t\treturn selection_1.indexOf(i);\n\t}\n\t\n\t// is index i in selection 2?\n\t// return index or -1 if absent\n\tmodule.in_sel_2 = function(i)\n\t{\n\t\treturn selection_2.indexOf(i);\n\t}\n\n\t// is index i in any selection?\n\t// return true or false\n\tmodule.in_sel = function(i)\n\t{\n\t    if ((selection_1.indexOf(i) == -1) &&\n\t        (selection_2.indexOf(i) == -1)) {\n\n\t        return false;\n\t    } else {\n\n\t        return true;\n\t    }\n\t}\n\n\t// return length selection 1\n\tmodule.len_sel_1 = function()\n\t{\n\t\treturn selection_1.length;\n\t}\n\t\n\t// return length selection 2\n\tmodule.len_sel_2 = function()\n\t{\n\t\treturn selection_2.length;\n\t}\n\t\n\t// toggle shift key flag\n\tmodule.key_flip = function(shiftKey, metaKey) {\n\t\tshift_key_pressed = shiftKey || metaKey;\n\t}\n\n\t// get state of shift key\n\tmodule.shift_key = function ()\n\t{\n\t    return shift_key_pressed;\n\t}\n\n\t// zero out current selection (unless shift key is down)\n\tmodule.zero_sel = function()\n\t{\n\t\tif (shift_key_pressed == false) {\n\t\t\tif (curr_sel_type == 1) {\n\t\t\t\tselection_1 = [];\n\t\t\t} else {\n\t\t\t\tselection_2 = [];\n\t\t\t}\n\t\t}\n\t}\n\n\t// updates selection variables\n\tmodule.update_sel = function(i)\n\t{\n\t\tif (curr_sel_type == 1) {\n\t\t\t\t\t\n\t\t\t// add to selection, if not already in selection\n\t\t\tvar sel_1_ind = selection_1.indexOf(i);\n\t\t\tif (sel_1_ind == -1) {\n\t\t\t\tselection_1.push(i);\n\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t// remove from other selection, if necessary\n\t\t\tvar sel_2_ind = selection_2.indexOf(i);\n\t\t\tif (sel_2_ind != -1) {\n\t\t\t\tselection_2.splice(sel_2_ind, 1);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t} else {\n\t\t\t\t\t\n\t\t\tvar sel_2_ind = selection_2.indexOf(i);\n\t\t\tif (sel_2_ind == -1) {\n\t\t\t\tselection_2.push(i);\n\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\tvar sel_1_ind = selection_1.indexOf(i);\n\t\t\tif (sel_1_ind != -1) {\n\t\t\t\tselection_1.splice(sel_1_ind, 1);\n\t\t\t}\t\t\t\t\t\n\t\t}\n\t}\n\n    // update selection accounting for focus\n    module.update_sel_focus = function(i)\n    {\n\n        // if there are no selections at all (of either type), we add to selection\n        if (((curr_sel_type == 1) &&\n             (selection_1.length == 0)) ||\n            ((curr_sel_type == 2) &&\n             (selection_2.length == 0))) {\n\n            // add to selection\n            module.update_sel(i);\n\n            // selection has been changed\n            var selectionEvent = new CustomEvent(\"DACSelectionsChanged\", { detail: {\n\t\t\t\t\t                             active_sel: [i]} });\n            document.body.dispatchEvent(selectionEvent);\n\n\n        } else {\n\n            // otherwise, we test for shift/meta key before adding to selection\n            if (shift_key_pressed) {\n\n                // update selection\n                module.update_sel(i);\n\n                // fire selection change event\n\t\t        var selectionEvent = new CustomEvent(\"DACSelectionsChanged\", { detail: {\n\t\t\t\t\t                                 active_sel: [i]} });\n                document.body.dispatchEvent(selectionEvent);\n\n            } else {\n\n                // in the last case we test for a focus event\n                module.change_focus(i);\n            }\n        }\n\n    }\n\n\t// update focus if selection is done changing\n\tmodule.update_focus = function()\n\t{\n\t    // if focus is not in selection, set to null\n\t    if (!module.in_sel(focus)) {\n\t        focus = null;\n\t    }\n\t}\n\n\t// focus or de-focus an individual\n\tmodule.change_focus = function(i) {\n\n\t    // check if individual is in selection\n        if (module.in_sel(i)) {\n\n            // focus or de-focus?\n            if (focus == i) {\n\n                // de-focus through all panes\n                var selectionEvent = new CustomEvent(\"DACActiveSelectionChanged\", { detail: {\n                                         active_sel: null,\n                                         active: true} });\n                document.body.dispatchEvent(selectionEvent);\n\n            } else {\n\n                // fire active selection (focus) event on current point\n                var selectionEvent = new CustomEvent(\"DACActiveSelectionChanged\", { detail: {\n                                         active_sel: i,\n                                         active: true} });\n                document.body.dispatchEvent(selectionEvent);\n            }\n\n        }\n\t}\n\n\t// put selections in random order\n\tmodule.shuffle = function ()\n\t{\n        selection_1 = shuffle(selection_1);\n        selection_2 = shuffle(selection_2);\n\t}\n\n\t// Fisher-Yates shuffle from bost.ocks.org\n\tfunction shuffle(array) {\n    var m = array.length, t, i;\n\n        // While there remain elements to shuffle…\n        while (m) {\n\n            // Pick a remaining element…\n            i = Math.floor(Math.random() * m--);\n\n            // And swap it with the current element.\n            t = array[m];\n            array[m] = array[i];\n            array[i] = t;\n        }\n\n        return array;\n    }\n\t\t\n\treturn module;\n\t\n};\n\nexport default module;","// This script contains code to load data from the Slycat database using\n// http requests via jQuery.  The data returned as a jQuery \"promises\" so\n// that multiple datasets can be requested before something is done.\n\n// S. Martin\n// 1/15/2015\n\nexport default {\n\n    // *******************************************************\n    // GENERIC FUNCTIONS: for reading tables, parameters, etc.\n    // *******************************************************\n\n    // load meta data from a table artifact stored in the model\n    get_table_metadata: function (tableid) {\n        return $.ajax(location.href + \"/tables/\" + tableid + \"/arrays/0/metadata\");\n    },\n\n    // get table data artifact stored in the model\n    get_table: function (tableid) {\n        return $.when($.ajax(location.href + \"/tables/\" +\n            tableid + \"/arrays/0/metadata\")).then(\n            function (metadata) {\n                return $.ajax(location.href + \"/tables/\" + tableid +\n                    \"/arrays/0/chunk?rows=0-\" + metadata[\"row-count\"] +\n                    \"&columns=0-\" + metadata[\"column-count\"]);\n            }\n        );\n    },\n\n    // get parameter data stored in model\n    get_parameters: function (parmid) {\n        return $.ajax(location.href + \"/parameters/\" + parmid);\n    },\n\n    // get array metadata (e.g. number of rows and columns)\n    // arrayid is the name and arraynum is index in the case of multiple arrays\n    get_array_metadata: function (arrayid, arraynum) {\n        return $.ajax(location.href + \"/arraysets/\" + arrayid + \"/metadata?arrays=\" +\n            arraynum);\n    },\n\n    // get actual array data (rowids is an array of rows to fetch)\n    get_array: function (arrayid, arraynum) {\n        return $.when($.ajax(location.href + \"/arraysets/\" + arrayid +\n            \"/metadata?arrays=\" + arraynum)).then(\n            function (metadata) {\n                if (metadata.arrays[0].dimensions.length == 1) {\n                    // only one row is available (1d array)\n                    return $.ajax(location.href + \"/arraysets/\" + arrayid + \"/arrays/\" +\n                        arraynum + \"/attributes/0/chunk?ranges=0,\" +\n                        metadata.arrays[0].dimensions[0].end);\n                } else {\n                    // pick all rows (2d array)\n                    return $.ajax(location.href + \"/arraysets/\" + arrayid + \"/arrays/\" +\n                        arraynum + \"/attributes/0/chunk?ranges=0,\" +\n                        metadata.arrays[0].dimensions[0].end + \",0,\" +\n                        metadata.arrays[0].dimensions[1].end);\n                }\n            }\n        );\n    }\n};","// This function contains code for displaying the scatter plot\n// for dial-a-cluster.  Code includes setup, and resizing the \n// jQuery UI layout pane and buttons for selection/zoom and coloring.\n//\n// NOTE: This routine assume the coordinates returned by MDS always\n// lie within a box [0,1]^3.\n//\n// S. Martin\n// 1/27/2015\n\nimport client from \"../../../slycat/web-server/js/slycat-web-client\";\nimport dialog from \"../../../slycat/web-server/js/slycat-dialog\";\nimport request from \"./dac-request-data.js\";\nimport selections from \"./dac-manage-selections.js\";\nimport $ from \"../../../slycat/node_modules/jquery\";\nimport d3 from \"../../../slycat/node_modules/d3\";\nimport URI from \"../../../slycat/node_modules/uri-js\";\n\n() =>\n{\n\t\n\t// public functions will be returned via the module variable\n\tvar module = {};\n\t\n\t// private variable containing MDS coordinates (2 dimensional)\n\tvar mds_coords = [];\n\n    // only use selected subset (binary mask, 0 = not in subset, 1 = in subset)\n    var mds_subset = [];\n\n    // current coordinates for subset view\n    var subset_center = [];\n\n\t// model ID\n\tvar mid = URI(window.location).segment(-1);\n\n    // difference button fisher ordering and current position\n    var fisher_order = null;\n    var fisher_pos = null;\n\n    // has the difference button ever been used?\n    var diff_button_used = null;\n\n\t// d3 variables for drawing MDS coords\n\tvar scatter_plot = null;\n\tvar scatter_points = null;\n\tvar x_scale = null;\n\tvar y_scale = null;\n\tvar color_scale = null;\n\t\n\t// maximum number of points to animate\n\tvar max_points_animate = null;\n\t\n\t// scatter border size\n\tvar scatter_border = null;\n\t\n\t// colors to use for selections\n\tvar point_color = null;\n\tvar point_size = null;\n\tvar sel_1_color = null;\n\tvar sel_2_color = null;\n\tvar focus_color = null;\n\n    // user preferences for circles or squares\n    var scatter_plot_type = null;\n\n\t// keep track of color for point in focus\n    var focus_point_color = null;\n\n\t// outline width for selections\n\tvar outline_no_sel = null;\n\tvar outline_sel = null;\n\t\n\t// colors to use for scaling\n\tvar color_by_low = null;\n\tvar color_by_high = null;\n    var cont_colormap = null;\n    var disc_colormap = null;\n\n\t// color by selection menu (default is \"Do Not Color\")\n\tvar curr_color_by_sel = -1;\n\tvar curr_color_by_col = [];\n\tvar color_by_cols = [-1];\n\tvar color_by_names = [\"Do Not Color\"];\n\tvar color_by_type = [];\n\tvar max_color_by_name_length = null;\n\n\t// variables to use in analysis\n\tvar var_include_columns = null;\n\n\t// initial setup: read in MDS coordinates & plot\n\tmodule.setup = function (MAX_POINTS_ANIMATE, SCATTER_BORDER, \n\t\tPOINT_COLOR, POINT_SIZE, SCATTER_PLOT_TYPE,\n\t\tNO_SEL_COLOR, SELECTION_1_COLOR, SELECTION_2_COLOR,\n\t\tSEL_FOCUS_COLOR, COLOR_BY_LOW, COLOR_BY_HIGH, CONT_COLORMAP,\n\t\tDISC_COLORMAP, MAX_COLOR_NAME, OUTLINE_NO_SEL, OUTLINE_SEL,\n\t\tdatapoints_meta, meta_include_columns, VAR_INCLUDE_COLUMNS)\n\t{\n\n\t\t// set the maximum number of points to animate, maximum zoom factor\n\t\tmax_points_animate = MAX_POINTS_ANIMATE;\n\t\t\n\t\t// set scatter border size\n\t\tscatter_border = SCATTER_BORDER;\n\t\t\n\t\t// set the colors to use for selections\n\t\tpoint_color = POINT_COLOR;\n\t\tfocus_point_color = POINT_COLOR;\n\t\tpoint_size = POINT_SIZE;\n\t\tno_sel_color = NO_SEL_COLOR;\n\t\tsel_1_color = SELECTION_1_COLOR;\n\t\tsel_2_color = SELECTION_2_COLOR;\n\t\tfocus_color = SEL_FOCUS_COLOR;\n        scatter_plot_type = SCATTER_PLOT_TYPE;\n\n\t\t// set colors for scaling\n\t\tcolor_by_low = COLOR_BY_LOW;\n\t\tcolor_by_high = COLOR_BY_HIGH;\n        cont_colormap = CONT_COLORMAP;\n        disc_colormap = DISC_COLORMAP;\n\n\t\t// set maximum color by name length\n\t\tmax_color_by_name_length = MAX_COLOR_NAME;\n\n\t\t// set selection width\n\t\toutline_no_sel = OUTLINE_NO_SEL;\n\t\toutline_sel = OUTLINE_SEL;\n\n        // include columns (variables and metadata)\n        var_include_columns = VAR_INCLUDE_COLUMNS;\n\n\t\t// set up selection button colors\n\t\t$(\"#dac-scatter-button-sel-1\").css(\"color\", sel_1_color);\n\t\t$(\"#dac-scatter-button-sel-2\").css(\"color\", sel_2_color);\n\t\t\n\t\t// set default selection type\n\t\tselections.set_sel_type(1);\n\t\t\n\t\t// bind selection/zoom buttons to callback operations\n\t\t$(\"#dac-scatter-button-sel-1\").on(\"click\", \n\t\t\tfunction() { selections.set_sel_type(1); module.draw(); });\n\t\t$(\"#dac-scatter-button-sel-2\").on(\"click\", \n\t\t\tfunction() { selections.set_sel_type(2); module.draw(); });\n\t\t$(\"#dac-scatter-button-subset\").on(\"click\",\n\t\t    function() { selections.set_sel_type(3); module.draw(); })\n\t\t$(\"#dac-scatter-button-zoom\").on(\"click\", \n\t\t\tfunction() { selections.set_sel_type(0); module.draw(); });\n\t\t\n\t\t// bind difference buttons to callback\n\t\t$(\"#dac-previous-three-button\").on(\"click\", previous_three);\n\t\t$(\"#dac-scatter-diff-button\").on(\"click\", diff_button);\n\t\t$(\"#dac-next-three-button\").on(\"click\", next_three);\n\n        // difference button has not yet been used\n        diff_button_used = false;\n\n\t\t$.when (request.get_array(\"dac-mds-coords\", 0)).then(\n\t\t\tfunction (mds_data)\n\t\t\t{\n\t\t\t\n\t\t\t\t// input data into model\n\t\t\t\tmds_coords = mds_data;\n\n\t\t\t\t// init shift key detection\n\t\t\t\td3.select(\"body\").on(\"keydown.brush\", key_flip)\n    \t\t\t\t\t\t     .on(\"keyup.brush\", key_flip);\n    \t\t\t\n    \t\t\t// svg scatter plot\n\t\t\t\tscatter_plot = d3.select(\"#dac-mds-scatterplot\");\n\n\t\t\t\t// d3 scales\n\t\t\t\tx_scale = d3.scale.linear()\n\t\t\t\t\t.domain([0 - scatter_border, 1 + scatter_border]);\n\t\t\t\ty_scale = d3.scale.linear()\n\t\t\t\t\t.domain([0 - scatter_border, 1 + scatter_border]);\n\n                // default color scale\n\t\t\t\tcolor_scale = d3.scale.linear()\n\t\t\t\t\t.range([color_by_low, color_by_high])\n\t\t\t\t\t.interpolate(d3.interpolateRgb);\n\n\t\t\t\t// set subset to full mds_coord set\n                for (i = 0; i < mds_coords.length; i++) {\n                    mds_subset.push(1);\n                }\n                selections.update_subset(mds_subset);\n\n                // set center to middle of full view\n                subset_center = [.5, .5];\n\n                // finish\n\t\t\t\tmodule.draw();\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t},\n\t\t\tfunction ()\n\t\t\t{\n\t\t\t\tdialog.ajax_error (\"Server failure: could not load MDS coords.\")(\"\",\"\",\"\");\n\t\t\t}\n\t\t);\n\n\t\t// set up color by selection\n\n\t\t// look for columns with numbers/strings for color by menu\n\t\tfor (var i = 0; i < datapoints_meta[\"column-count\"]; i++)\n\t\t{\n\n            // we accept number and string data, only for included columns\n\t\t\tif ((meta_include_columns.indexOf(i) != -1) &&\n\t\t\t    ((datapoints_meta[\"column-types\"][i] == \"float64\") ||\n\t\t\t    (datapoints_meta[\"column-types\"][i] == \"string\"))) {\n\t\t\t    color_by_type.push(datapoints_meta[\"column-types\"][i]);\n\t\t\t\tcolor_by_cols.push(i);\n\n\t\t\t\t// make sure names aren't too long (if they are then truncate)\n\t\t\t\tvar name_i = datapoints_meta[\"column-names\"][i];\n\t\t\t\tif (name_i.length > max_color_by_name_length) {\n\t\t\t\t    name_i = name_i.substring(0,max_color_by_name_length) + \" ...\";\n\t\t\t\t}\n\t\t\t\tcolor_by_names.push(name_i);\n\t\t\t};\n\n\t\t};\n\t\t\t\t\n\t\t// populate pull down menu\n\t\tdisplay_pull_down.bind($(\"#dac-scatter-select\"))();\n\n\t}\n\t\n\t// toggle shift key flag\n\tfunction key_flip() {\n\t\tselections.key_flip(d3.event.shiftKey, d3.event.metaKey);\n\t}\n\t\t\n\t// draw the MDS scatter plot\n\tmodule.draw = function ()\n\t{\n\n\t\t// draw svg to size of container\n\t\tvar width = $(\"#dac-mds-pane\").width();\n\t\tvar height = $(\"#dac-mds-pane\").height();\n\n\t\t// set correct viewing window\n\t\tx_scale.range([0,width]);\n\t\ty_scale.range([height,0]);\n\t\t\n\t\t// re-size scatter plot\n\t\tscatter_plot.attr(\"width\", width)\n\t\t\t.attr(\"height\", height);\n\t\t\n\t\t// brush has to be under points\n\t\tsel_zoom_buttons();\n        draw_points();\n\n\t}\n\n\t// entirely redraws points (including selection)\n\tfunction draw_points () {\n\n\t\t// draw points (either circles or squares)\n\t\tif (scatter_plot_type == \"circle\") {\n\t\t    draw_circles();\n\t\t} else {\n\t\t    draw_squares();\n\t\t}\n\n\t}\n\n\t// entirely redraws points (including selection, using circles)\n\tfunction draw_circles ()\n\t{\n\t\t// erase any old points\n\t\tscatter_plot.selectAll(\"circle\").remove();\n\n        // remove old focus point\n        scatter_plot.selectAll(\".focus\").remove();\n\n\t\t// input new points\n        scatter_points = scatter_plot.selectAll(\"circle\")\n            .data(mds_coords)\n            .enter()\n            .append(\"circle\")\n\n\t\t// make sure they are colored according to selections\n\t\tscatter_points.attr(\"stroke\", function(d,i) {\n\t\t\n\t\t\t// default is point_color\n\t\t\tvar outline_color = no_sel_color;\n\t\t\t\t\t\t\t\n\t\t\tif (selections.in_sel_1(i) != -1) {\n\t\t\t\toutline_color = sel_1_color;\n\t\t\t}\n\t\t\tif (selections.in_sel_2(i) != -1) {\n\t\t\t\toutline_color = sel_2_color;\n\t\t\t}\n\t\t\t\n\t\t\treturn outline_color;\n\t\t});\n\t\t\n\t\t// selections get thicker outline\n\t\tscatter_points.attr(\"stroke-width\", function(d,i) {\n\t\t\n\t\t\t// default stroke-width is 1\n\t\t\tvar outline_width = outline_no_sel;\n\t\t\t\n\t\t\t// selected width is 2\n\t\t\tif (selections.in_sel_1(i) != -1 ||\n\t\t\t    selections.in_sel_2(i) != -1) {\n\t\t\t   \toutline_width = outline_sel;\n\t\t\t}\n\t\t\t\n\t\t\treturn outline_width;\n\t\t});\n\n\t\t// fill in points\n\t\tif (curr_color_by_col.length > 0) {\n\t\t\tscatter_points.attr(\"fill\", function(d,i) {\n\t\t\t\treturn color_scale(curr_color_by_col[i]);\n\t\t\t});\t\t\t\n\t\t} else {\n\t\t\tscatter_points.attr(\"fill\", point_color);\n\t\t}\n\t\t\t\n\t\t// put in correct positions\t\t\t\n\t\tscatter_points.attr(\"cx\", function(d) {\n\t\t\t\treturn x_scale(d[0])\n\t\t\t})\n\t\t\t.attr(\"cy\", function(d) {\n\t\t\t\treturn y_scale(d[1])\n\t\t\t})\n\t\t\t.attr(\"r\", point_size)\n\t\t\t.on(\"mousedown\", sel_individual);\n\n\t\t// draw new focus circle, if needed\n        if (selections.focus() != null) {\n\n            // are we in color by mode?\n            if (curr_color_by_col.length > 0) {\n                // yes -- get current point color\n                focus_point_color = color_scale(curr_color_by_col[selections.focus()]);\n            } else {\n                // no -- revert to standard point color\n                focus_point_color = point_color;\n            }\n\n            // get focus data\n            scatter_plot.selectAll(\".focus\")\n                        .data([mds_coords[selections.focus()]])\n                        .attr(\"class\", \"focus\")\n                        .enter()\n                        .append(\"circle\")\n                        .attr(\"class\", \"focus\")\n                        .attr(\"stroke\", focus_color)\n                        .attr(\"stroke-width\", outline_sel)\n                        .attr(\"fill\", focus_point_color)\n                        .attr(\"cx\", function(d) {\n                            return x_scale(d[0])\n                        })\n                        .attr(\"cy\", function(d) {\n                            return y_scale(d[1])\n                        })\n                        .attr(\"r\", point_size)\n                        .on(\"mousedown\", defocus);\n\n        }\n\t\t\t\n\t}\n\n\t// entirely redraws points (including selection)\n\tfunction draw_squares ()\n\t{\n\t\t// erase any old points\n\t\tscatter_plot.selectAll(\".square\").remove();\n\n        // remove old focus point\n        scatter_plot.selectAll(\".focus\").remove();\n\n\t\t// input new points\n        scatter_points = scatter_plot.selectAll(\".square\")\n            .data(mds_coords)\n            .attr(\"class\", \"square\")\n            .enter()\n            .append(\"rect\")\n            .attr(\"class\", \"square\");\n\n\t\t// make sure they are colored according to selections\n\t\tscatter_points.attr(\"stroke\", function(d,i) {\n\n\t\t\t// default is point_color\n\t\t\tvar outline_color = no_sel_color;\n\n\t\t\tif (selections.in_sel_1(i) != -1) {\n\t\t\t\toutline_color = sel_1_color;\n\t\t\t}\n\t\t\tif (selections.in_sel_2(i) != -1) {\n\t\t\t\toutline_color = sel_2_color;\n\t\t\t}\n\n\t\t\treturn outline_color;\n\t\t});\n\n\t\t// selections get thicker outline\n\t\tscatter_points.attr(\"stroke-width\", function(d,i) {\n\n\t\t\t// default stroke-width is 1\n\t\t\tvar outline_width = outline_no_sel;\n\n\t\t\t// selected width is 2\n\t\t\tif (selections.in_sel_1(i) != -1 ||\n\t\t\t    selections.in_sel_2(i) != -1) {\n\t\t\t   \toutline_width = outline_sel;\n\t\t\t}\n\n\t\t\treturn outline_width;\n\t\t});\n\n\t\t// fill in points\n\t\tif (curr_color_by_col.length > 0) {\n\t\t\tscatter_points.attr(\"fill\", function(d,i) {\n\t\t\t\treturn color_scale(curr_color_by_col[i]);\n\t\t\t});\n\t\t} else {\n\t\t\tscatter_points.attr(\"fill\", point_color);\n\t\t}\n\n\t\t// put in correct positions\n\t\tscatter_points.attr(\"x\", function(d) {\n\t\t\t\treturn x_scale(d[0]) - point_size;\n\t\t\t})\n\t\t\t.attr(\"y\", function(d) {\n\t\t\t\treturn y_scale(d[1]) - point_size;\n\t\t\t})\n\t\t\t.attr(\"width\", point_size*2)\n\t\t\t.attr(\"height\", point_size*2)\n\t\t\t.on(\"mousedown\", sel_individual);\n\n\t\t// draw new focus rect, if needed\n        if (selections.focus() != null) {\n\n            // are we in color by mode?\n            if (curr_color_by_col.length > 0) {\n                // yes -- get current point color\n                focus_point_color = color_scale(curr_color_by_col[selections.focus()]);\n            } else {\n                // no -- revert to standard point color\n                focus_point_color = point_color;\n            }\n\n            // get focus data\n            scatter_plot.selectAll(\".focus\")\n                        .data([mds_coords[selections.focus()]])\n                        .attr(\"class\", \"focus\")\n                        .enter()\n                        .append(\"rect\")\n                        .attr(\"class\", \"focus\")\n                        .attr(\"stroke\", focus_color)\n                        .attr(\"stroke-width\", outline_sel)\n                        .attr(\"fill\", focus_point_color)\n                        .attr(\"x\", function(d) {\n                            return x_scale(d[0]) - point_size;\n                        })\n                        .attr(\"y\", function(d) {\n                            return y_scale(d[1]) - point_size;\n                        })\n                        .attr(\"width\", point_size*2)\n                        .attr(\"height\", point_size*2)\n                        .on(\"mousedown\", defocus);\n\n        }\n\n\t}\n\n    // animate if MDS coordinates have changed, or from zoom\n    animate = function ()\n    {\n\n        // circles and square have to be treated differently\n        if (scatter_plot_type == \"circle\") {\n            animate_circles();\n        } else {\n            animate_squares();\n        }\n    }\n\n\t// animate if MDS coordinates have changed, or for zoom (private) for circles\n\tanimate_circles = function ()\n\t{\n\t\t// assume that only data has changed, scale should still be OK\n\t\tscatter_points.transition()\n\t\t\t.attr(\"cx\", function(d) {\n\t\t\treturn x_scale(d[0])\n\t\t\t})\n\t\t\t.attr(\"cy\", function(d) {\n\t\t\t\treturn y_scale(d[1])\n\t\t\t});\n\n\t\t// move focus point\n\t\tscatter_plot.selectAll(\".focus\")\n\t\t            .transition()\n\t\t            .attr(\"cx\", function(d) {\n\t\t\t            return x_scale(d[0])\n\t\t\t        })\n\t\t\t        .attr(\"cy\", function(d) {\n\t\t\t\t        return y_scale(d[1])\n\t\t\t        });\n\t}\n\n\t// animate if MDS coordinates have changed, or for zoom (private) for squares\n\tanimate_squares = function ()\n\t{\n\t\t// assume that only data has changed, scale should still be OK\n\t\tscatter_points.transition()\n\t\t\t.attr(\"x\", function(d) {\n\t\t\treturn x_scale(d[0]) - point_size;\n\t\t\t})\n\t\t\t.attr(\"y\", function(d) {\n\t\t\t\treturn y_scale(d[1]) - point_size;\n\t\t\t});\n\n\t\t// move focus point\n\t\tscatter_plot.selectAll(\".focus\")\n\t\t            .transition()\n\t\t            .attr(\"x\", function(d) {\n\t\t\t            return x_scale(d[0]) - point_size;\n\t\t\t        })\n\t\t\t        .attr(\"y\", function(d) {\n\t\t\t\t        return y_scale(d[1]) - point_size;\n\t\t\t        });\n\t}\n\t\n\t// updates the MDS coords given new alpha values and/or subset\n\tmodule.update = function (alpha_values)\n\t{\n\n\t\t// call server to compute new coords\n\t\tclient.post_sensitive_model_command(\n\t\t{\n\t\t\tmid: mid,\n      \t\ttype: \"DAC\",\n\t\t\tcommand: \"update_mds_coords\",\n\t\t\tparameters: {alpha: alpha_values,\n\t\t\t             subset: selections.get_subset(),\n\t\t\t             subset_center: subset_center,\n\t\t\t             current_coords: mds_coords,\n\t\t\t             include_columns: var_include_columns},\n\t\t\tsuccess: function (result)\n\t\t\t\t{\n\t\t\t\t\t// record new values in mds_coords\n\t\t\t\t\tmds_coords = JSON.parse(result)[\"mds_coords\"];\n\t\t\t\t\t\n\t\t\t\t\t// update the data in d3 (using either cirlces or squares)\n\t\t\t\t\tscatter_plot.selectAll(scatter_plot_type)\n\t\t\t\t\t\t.data(mds_coords);\n\n\t\t\t\t\t// update the focus point\n\t\t\t\t\tif (selections.focus() != null) {\n                        scatter_plot.selectAll(\".focus\")\n                                    .data([mds_coords[selections.focus()]]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// re-draw display (animate if small number of points)\n\t\t\t\t\tif (mds_coords.length > max_points_animate) {\n\t\t\t\t\t\tmodule.draw();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tanimate();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\terror: function ()\n\t\t\t\t{\n\t\t\t\t\tdialog.ajax_error ('Server failure: could not update MDS coords.')(\"\",\"\",\"\");\n\t\t\t\t}\n\t\t\t\t\n\t\t});\n\t}\n\n\t// previous three button\n\tprevious_three = function ()\n\t{\n\n\t    // compute previous position\n\t    var prev_pos = fisher_pos - 3;\n\n\t    // check that new position exists and fire event\n\t    if ((prev_pos < fisher_order.length) && (prev_pos >= 0)) {\n\n            // fire new difference event\n            var differenceEvent = new CustomEvent(\"DACDifferenceComputed\",\n                                                  {detail: fisher_order.slice(prev_pos)});\n            document.body.dispatchEvent(differenceEvent);\n\n            // enable next button\n            $(\"#dac-next-three-button\").removeClass(\"disabled\");\n\n            // update position in list\n            fisher_pos = prev_pos;\n\n            // check if there are any further positions\n            if (fisher_pos - 3 < 0) {\n\n                // if not, disable previous button\n                $(\"#dac-previous-three-button\").addClass(\"disabled\");\n            }\n\t    }\n\n\t}\n\n\t// difference button\n\tdiff_button = function()\n\t{\n\n        // inactivate button\n        $(\"#dac-scatter-diff-button\").prop(\"active\", false);\n\n\t\t// make sure there are two selections\n\t\tif (selections.len_sel_1() <= 1 ||\n\t\t\tselections.len_sel_2() <= 1)\n\t\t{\n\t\t\tdialog.ajax_error\n\t\t\t('Please make sure both red and blue selections have two or more points before computing the difference.')\n\t\t\t(\"\",\"\",\"\");\n\t\t\treturn;\n\t\t}\n\n\t\t// call server to compute Fisher values for time series\n\t\tvar sel_1 = selections.sel_1();\n\t\tvar sel_2 = selections.sel_2();\n\t\tclient.post_sensitive_model_command(\n\t\t{\n\t\t\tmid: mid,\n\t\t\ttype: \"DAC\",\n\t\t\tcommand: \"compute_fisher\",\n\t\t\tparameters: {selection_1: sel_1,\n\t\t\t             selection_2: sel_2,\n\t\t\t             include_columns: var_include_columns},\n\t\t\tsuccess: function (result)\n\t\t\t\t{\n\n\t\t\t\t\t// compute Fisher's discriminant for each time series separately\n\t\t\t\t\tvar fisher_disc = JSON.parse(result)[\"fisher_disc\"];\n\t\t\t\t\t\n\t\t\t\t\t// sort Fisher's discriminant values and adjust plot order\n\t\t\t\t\tvar fisher_inds = sort_indices(fisher_disc);\n\n                    // save indices for previous/next three buttons\n                    fisher_order = fisher_inds;\n\n                    // save current position for previous/next three buttons\n                    fisher_pos = 0;\n\n                    // disable previous three button\n                    $(\"#dac-previous-three-button\").addClass(\"disabled\");\n\n                    // difference button has been used (show as synced)\n                    module.toggle_difference(true);\n\n                    // if we have more than three variable, enable next three button\n                    if (fisher_inds.length > 3) {\n                        $(\"#dac-next-three-button\").removeClass(\"disabled\");\n                    }\n\n\t\t\t\t\t// fire difference event\n\t\t            var differenceEvent = new CustomEvent(\"DACDifferenceComputed\",\n\t\t                                                  { detail: fisher_inds });\n                    document.body.dispatchEvent(differenceEvent);\n\n\t\t\t\t},\n\t\t\terror: function ()\n\t\t\t\t{\n\t\t\t\t\tdialog.ajax_error(\"Server failure: could not compute Fisher's discriminant.\")(\"\",\"\",\"\");\n\t\t\t\t}\n\t\t});\n\n\t}\n\n\t// next three button\n\tnext_three = function ()\n\t{\n\n\t    // compute next position\n\t    var next_pos = fisher_pos + 3;\n\n\t    // check that next position exists and fire event\n\t    if (next_pos < fisher_order.length) {\n\n            // fire new difference event\n            var differenceEvent = new CustomEvent(\"DACDifferenceComputed\",\n                                                  {detail: fisher_order.slice(next_pos)});\n            document.body.dispatchEvent(differenceEvent);\n\n            // enable previous button\n            $(\"#dac-previous-three-button\").removeClass(\"disabled\");\n\n            // update position in list\n            fisher_pos = next_pos;\n\n            // check if there are any further positions\n            if (fisher_pos + 3 >= fisher_order.length) {\n\n                // if not, disable next button\n                $(\"#dac-next-three-button\").addClass(\"disabled\");\n            }\n\t    }\n\t}\n\n\t// toggle difference button indicator to show desired state\n\t// true = synced, false = out of sync\n\tmodule.toggle_difference = function (desired_state)\n\t{\n\n\t    if (desired_state == true) {\n\n\t        // set difference indicator to synced\n\t        $(\"#dac-selection-synced\").show();\n\t        $(\"#dac-selection-not-synced\").hide();\n\n\t        // difference button has been used\n\t        diff_button_used = true;\n\n\t    } else if (diff_button_used == true) {\n\n\t        // set difference state to out of sync\n\t        $(\"#dac-selection-synced\").hide();\n\t        $(\"#dac-selection-not-synced\").show();\n\t    }\n\t}\n\n\t// routine to return sort array and return indices\n\t// (return only subset of included columns)\n\tfunction sort_indices(arr)\n\t{\n\t\n\t\t// add indices to array\n\t\tvar arr_with_index = [];\n\t\tfor (var i in arr) {\n    \t\tarr_with_index.push([arr[i], parseInt(i)]);\n\t\t}\n\t\t\t\t\n\t\t// now sort new array by \"key\", carrying along index\n\t\tarr_with_index.sort(function(left, right) {\n  \t\t\treturn left[0] > right[0] ? -1 : 1;\n\t\t});\n\t\t\n\t\t// isolate indices (keeping only if an included column)\n\t\tvar indices = [];\n\t\tfor (var j in arr_with_index) {\n\n            var arr_ind_j = arr_with_index[j][1];\n\t\t    if (var_include_columns.indexOf(parseInt(arr_ind_j)) != -1) {\n\t\t        indices.push(arr_ind_j);\n\t\t    }\n\t\t}\n\n\t\t// return only indices\n\t\treturn indices;\n\t\t\n\t}\n\t\n\tdisplay_pull_down = function()\n\t{\n\t\n\t\tthis.empty();\n\n\t\t// pull down contains names from color_by_names\n\t\tfor (var i = 0; i < color_by_cols.length; i++)\n\t\t{\n\t\t\t// generate the pull down (select) in HTML\n\t\t\tvar select_item = $('<option value=\"' + color_by_cols[i] +'\">').appendTo(this);\n\t\t\tselect_item.text(color_by_names[i]);\n\t\t}\n\t\t\n\t\t// set default option\n\t\tthis.val(-1)\n\t\t\n\t\t// define action for changing menu\n\t\tthis.change(function()\n\t\t\t{\n\t\t\t\t// get column to color by\n\t\t\t\tvar select_col = Number(this.value);\n\t\t\t\tcurr_color_by_sel = select_col;\n\n\t\t\t\t// set up coloring\n\t\t\t\tif (select_col == -1) {\n\t\t\t\t\n\t\t\t\t\t// revert to no color & re-draw\n\t\t\t\t\tcurr_color_by_col = [];\n\t\t\t\t\tmodule.draw();\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\n\t\t\t\t\t// request new data from server\n\t\t\t\t\t$.when(request.get_table(\"dac-datapoints-meta\")).then(\n\t\t\t\t\t\tfunction (data)\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t    // check for string data\n\t\t\t\t\t\t    if (color_by_type[color_by_cols.indexOf(select_col) - 1] == \"string\") {\n\n\t\t\t\t\t\t        // use alphabetical order by number to color\n\n\t\t\t\t\t\t        // get string data\n\t\t\t\t\t\t        var color_by_string_data = data[\"data\"][select_col];\n\n\t\t\t\t\t\t        // get unique sorted string data\n\t\t\t\t\t\t        var unique_sorted_string_data = Array.from(new Set(color_by_string_data)).sort();\n\n\n                                // get indices or original string data in the unique sorted string data\n                                curr_color_by_col = [];\n                                for (i=0; i < color_by_string_data.length; i++) {\n                                    curr_color_by_col.push(unique_sorted_string_data.indexOf(color_by_string_data[i]));\n                                }\n\n                                // set colormap to discrete color map if present\n                                if (disc_colormap == null) {\n\n                                    // revert to default color map\n                                    color_scale = d3.scale.linear()\n                                        .range([color_by_low, color_by_high])\n                                        .interpolate(d3.interpolateRgb);\n\n                                } else {\n\n                                    // use selected color brewer scale\n                                    color_scale = d3.scale.quantize()\n                                        .range(disc_colormap);\n\n                                };\n\n\t\t\t\t\t\t    } else {\n\n                                // get selected column from data base (number data)\n                                curr_color_by_col = data[\"data\"][select_col];\n\n                                // set colormap to continuous color map if present\n                                if (cont_colormap == null) {\n\n                                    // revert to default color map\n                                    color_scale = d3.scale.linear()\n                                        .range([color_by_low, color_by_high])\n                                        .interpolate(d3.interpolateRgb);\n\n                                } else {\n\n                                    // use selected color brewer scale\n                                    color_scale = d3.scale.quantize()\n                                        .range(cont_colormap);\n\n                                };\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t\t// get max and min of appropriate column in metadata table\n\t\t\t\t\t\t\tvar max_color_val = d3.max(curr_color_by_col);\n\t\t\t\t\t\t\tvar min_color_val = d3.min(curr_color_by_col);\n\n\t\t\t\t\t\t\t// set domain of color scale\n\t\t\t\t\t\t\tcolor_scale.domain([min_color_val, max_color_val]);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t// draw new color scale\n\t\t\t\t\t\t\tmodule.draw();\n\t\t\t\t\t\t\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfunction ()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdialog.ajax_error ('Server failure: could not load color by data column.')(\"\",\"\",\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t});\n\t\t\t\t\n\t}\n\t\n\t// set callback for selection 1,2, subset or zoom radio buttons\n\tsel_zoom_buttons = function()\n\t{\n\n\t\t// clear up any old selection/zooming\n\t\tscatter_plot.selectAll(\"g.brush\").remove();\n\t\t\n\t\t// enable zoom\n\t\tif (selections.sel_type() == 0)\n\t\t{\t\n\t\t\t// set up zoom brushing\n\t\t\tscatter_plot.append(\"g\")\n\t\t\t\t.attr(\"class\", \"brush\")\n\t\t\t\t.call(d3.svg.brush()\n\t\t\t\t\t.x(x_scale)\n\t\t\t\t\t.y(y_scale)\n\t\t\t\t\t.on(\"brushend\", zoom));\n\t\t\t\t\t\n\t\t} else if (selections.sel_type() == 3) {\n\n\t\t    // set up subset selection\n\t\t    scatter_plot.append(\"g\")\n\t\t\t\t.attr(\"class\", \"brush\")\n\t\t\t\t.call(d3.svg.brush()\n\t\t\t\t\t.x(x_scale)\n\t\t\t\t\t.y(y_scale)\n\t\t\t\t\t.on(\"brushend\", subset));\n\n\t\t} else {\n\t\t\n\t\t\t// otherwise enable normal selection\n\t\t\tscatter_plot.append(\"g\")\n\t\t\t\t.attr(\"class\", \"brush\")\n\t\t\t\t.call(d3.svg.brush()\n\t\t\t\t\t.x(x_scale)\n\t\t\t\t\t.y(y_scale)\n\t\t\t\t\t.on(\"brushstart\", selections.zero_sel)\n\t\t\t\t\t.on(\"brush\", sel_brush)\n\t\t\t\t\t.on(\"brushend\", sel_brush_end));\n\t\t};\n\t\t\n\t}\n\t\n\t// zoom handler call back\n\tfunction zoom()\n\t{\n\t\n\t\t// find final selection indices\n\t\tvar extent = d3.event.target.extent();\n\t\t\t\t\t\t\n\t\t// reset scale (assumed nothing zoomed)\n\t\tmodule.reset_zoom();\n\t\t\t\t\t\t\n\t\tfor (var i = 0; i < mds_coords.length; i++)\n\t\t\t{\n\t\t\t\t\t\n\t\t\t\t// was it an empty zoom?\n\t\t\t\tif (extent[0][0] != extent[1][0] &&\n\t\t\t\t\textent[0][1] != extent[1][1])\n\t\t\t\t{\n\t\t\t\t\t// user did zoom in on something, so reset window\n\t\t\t\t\tx_scale.domain([extent[0][0], extent[1][0]]);\n\t\t\t\t\ty_scale.domain([extent[0][1], extent[1][1]]);\t\n\t\t\t\t};\n\n\t\t\t};\n\n\t\t\t// remove gray selection box\n\t\t\td3.event.target.clear();\n\t\t\td3.select(this).call(d3.event.target);\n\t\t\t\t\t\t\n\t\t\t// re-draw display (animate if small number of points)\n\t\t\tif (mds_coords.length > max_points_animate) {\n\t\t\t\tmodule.draw();\n\t\t\t} else {\n\t\t\t\tanimate();\n\t\t\t};\n\t\t\t\t\n\t};\n\n    // get subset for future analysis\n\tfunction subset ()\n\t{\n\n        // get subset selected\n\t\tvar extent = d3.event.target.extent();\n\n\t\t// look for points that were selected\n\t\tvar selection = [];\n\t\tfor (var i = 0; i < mds_coords.length; i++)\n\t\t{\n\t\t\tif (extent[0][0] <= mds_coords[i][0] &&\n\t\t\t\tmds_coords[i][0] < extent[1][0] &&\n\t\t\t\textent[0][1] <= mds_coords[i][1] &&\n\t\t\t\tmds_coords[i][1] < extent[1][1])\n\t\t\t\t{\n\t\t\t\t\t// save current selection\n\t\t\t\t\tselection.push(i);\n\t\t\t\t};\n\t\t};\n\n        // save current center for scaling\n        var subset_extent = d3.transpose([x_scale.domain(), y_scale.domain()]);\n\n        // compute subset center\n        subset_center = [(subset_extent[0][0] + subset_extent[1][0])/2.0,\n                         (subset_extent[0][1] + subset_extent[1][1])/2.0];\n\n        // default to leave zoom alone\n        var reset_zoom = false;\n\n        // separate into inclusion and exclusion based on shift key\n        if (!selections.shift_key())\n        {\n\n            // if nothing is included, we reset to all data\n            if (selection.length == 0) {\n                for (var i = 0; i < mds_coords.length; i++) {\n                    mds_subset[i] = 1;\n                }\n            } else {\n\n                // otherwise we include only the selection, and nothing else\n                for (var i = 0; i < mds_coords.length; i++) {\n                    mds_subset[i] = 0;\n                    if (selection.indexOf(i) != -1) {\n                        mds_subset[i] = 1;\n                    }\n\n                    // in this case, we set the center to the subset view\n                    subset_center = [(extent[0][0] + extent[1][0])/2.0,\n                                     (extent[0][1] + extent[1][1])/2.0];\n\n                    // reset zoom to full screen\n\t\t            //x_scale.domain([0 - scatter_border, 1 + scatter_border]);\n\t\t            //y_scale.domain([0 - scatter_border, 1 + scatter_border]);\n\t\t            reset_zoom = true;\n\n                }\n            }\n\n        } else {\n\n            // exclusions are additive\n            // meaning we do not necessarily include everything else\n            for (var i = 0; i < selection.length; i++) {\n                mds_subset[selection[i]] = 0;\n            }\n        }\n\n        // remove gray selection box\n        d3.event.target.clear();\n        d3.select(this).call(d3.event.target);\n\n        // fire subset changed event\n        var subsetEvent = new CustomEvent(\"DACSubsetChanged\", { detail: {\n\t\t\t\t\t                         new_subset: mds_subset,\n\t\t\t\t\t                         zoom: reset_zoom} });\n        document.body.dispatchEvent(subsetEvent);\n\t}\n\n    // reset zoom, accessable to ui controller\n    module.reset_zoom = function ()\n    {\n        // reset zoom to full screen\n\t\tx_scale.domain([0 - scatter_border, 1 + scatter_border]);\n\t\ty_scale.domain([0 - scatter_border, 1 + scatter_border]);\n    }\n\n\t// selection brush handler call back\n\tfunction sel_brush()\n\t{\n\t\t\t\t\t\t\n\t\t// gray real-time selection box\n\t\tvar extent = d3.event.target.extent();\n\t\t\n\t\tscatter_points.attr(\"stroke\", function(d,i) {\n\t\t\n\t\t\t// default fill\n\t\t\tvar outline_color = no_sel_color;\n\t\t\t\t\t\t\t\n\t\t\t// if newly selected, fill color is current selection color\n\t\t\tif (extent[0][0] <= d[0] && d[0] < extent[1][0]\n\t\t\t\t&& extent[0][1] <= d[1] && d[1] < extent[1][1]) {\n\t\t\t\t\n\t\t\t\t\t// use curr_sel_type to identify color\n\t\t\t\t\tif (selections.sel_type() == 1) {\n\t\t\t\t\t\toutline_color = sel_1_color;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutline_color = sel_2_color;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t} else { \n\t\t\t\t\n\t\t\t\t// color everything else according to what's already selected\n\t\t\t\tif (selections.in_sel_1(i) != -1) {\n\t\t\t\t\toutline_color = sel_1_color;\n\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\tif (selections.in_sel_2(i) != -1) {\n\t\t\t\t\toutline_color = sel_2_color;\n\t\t\t\t};\n\t\t\t};\n\t\t\t\t\t\t\t\n\t\t\treturn outline_color;\n\t\t});\n\t\t\n\t\tscatter_points.attr(\"stroke-width\", function(d,i) {\n\t\t\n\t\t\t// default outline width\n\t\t\tvar outline_width = outline_no_sel;\n\t\t\t\t\t\t\t\n\t\t\t// if newly selected, outline is thick\n\t\t\tif (extent[0][0] <= d[0] && d[0] < extent[1][0]\n\t\t\t\t&& extent[0][1] <= d[1] && d[1] < extent[1][1]) {\n\t\t\t\t\n\t\t\t\t\toutline_width = outline_sel;\n\t\t\t\t\t\n\t\t\t} else { \n\t\t\t\t\n\t\t\t\t// outline is also thick for things that were previously selected\n\t\t\t\tif (selections.in_sel_1(i) != -1 ||\n\t\t\t\t    selections.in_sel_2(i) != -1) {\n\t\t\t\t\toutline_width = outline_sel;\n\t\t\t\t};\n\n\t\t\t};\n\t\t\t\t\t\t\t\n\t\t\treturn outline_width;\n\t\t});\n\t\t\n\t}\n\t\n\t// selection brush end handler call back\n\tfunction sel_brush_end()\n\t{\n\t\t\t\t\t\t\t\t\t\n\t\t// find final selection indices\n\t\tvar extent = d3.event.target.extent();\n\t\t\n\t\t// look for points that were selected\n\t\t// (record for table jump)\n\t\tvar selection = [];\n\t\tfor (var i = 0; i < mds_coords.length; i++)\n\t\t{\n\t\t\tif (extent[0][0] <= mds_coords[i][0] && \n\t\t\t\tmds_coords[i][0] < extent[1][0] && \n\t\t\t\textent[0][1] <= mds_coords[i][1] && \n\t\t\t\tmds_coords[i][1] < extent[1][1])\n\t\t\t\t{\n\t\t\t\t\n\t\t\t\t\t// save current selection\n\t\t\t\t\tselections.update_sel(i);\n\t\t\t\t\tselection.push(i);\n\n\t\t\t\t};\n\t\t};\n\n        // remove gray selection box\n        d3.event.target.clear();\n        d3.select(this).call(d3.event.target);\n\n\t\t// fire selection change event\n\t\tvar selectionEvent = new CustomEvent(\"DACSelectionsChanged\", { detail: {\n\t\t\t\t\t                         active_sel: selection} });\n        document.body.dispatchEvent(selectionEvent);\n\t}\n\t\n\t// select an individual point\n\tfunction sel_individual (d,i)\n\t{\n\n        // check for subset exclusion\n        if (selections.sel_type() == 3) {\n\n            exclude_individual(i);\n\n        // check for zoom mode\n        } else if (selections.sel_type() == 0) {\n\n            // potentially change focus\n            selections.change_focus(i);\n\n        // in selection mode\n        } else {\n\n            // update focus and/or selection\n            selections.update_sel_focus(i);\n        }\n\n\t}\n\n\t// perform subset exclusion (assuming we're in subset mode)\n\tfunction exclude_individual (i) {\n\n        // check for shift key (to exclude a single point)\n        if (selections.shift_key()) {\n\n            // remove point from subset\n            mds_subset[i] = 0;\n\n            // fire subset changed event\n            var subsetEvent = new CustomEvent(\"DACSubsetChanged\", { detail: {\n                                                new_subset: mds_subset} });\n            document.body.dispatchEvent(subsetEvent);\n\n        // otherwise it's a focus event\n        } else {\n\n            selections.change_focus(i);\n        }\n\n\t}\n\n    // de-select currently focused point\n    function defocus() {\n\n        // check to see if we're in selection mode\n        if ((selections.sel_type() == 3) && selections.shift_key()) {\n\n            exclude_individual(selections.focus());\n\n        } else {\n\n            // de-focus through all panes\n            var selectionEvent = new CustomEvent(\"DACActiveSelectionChanged\", { detail: {\n                                     active_sel: null,\n                                     active: true} });\n            document.body.dispatchEvent(selectionEvent);\n\n        }\n\n    }\n\n\treturn module;\n\t\n};\n\nexport default module;\n","// This scripts manages the time series (and other types) of plots\r\n// on the right hand side of the dial-a-cluster interface.  You\r\n// should first call setup to initialize private variables.\r\n//\r\n// S. Martin\r\n// 2/13/2015\r\n\r\n/*\r\nCopyright 2013, Sandia Corporation. Under the terms of Contract\r\nDE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains certain\r\nrights in this software.\r\n*/\r\n\r\nimport client from \"../../../slycat/web-server/js/slycat-web-client\";\r\nimport dialog from \"../../../slycat/web-server/js/slycat-dialog\";\r\nimport selections from \"./dac-manage-selections.js\";\r\nimport $ from \"../../../slycat/node_modules/jquery\";\r\nimport d3 from \"../../../slycat/node_modules/d3\";\r\nimport URI from \"../../../slycat/node_modules/uri-js\";\r\n\r\n() =>\r\n{\r\n\r\n\t// public functions (or variables)\r\n\tvar module = {};\r\n\t\r\n\t// private variables\r\n\t// -----------------\r\n\r\n    // plot limits to ensure adequate speed/responsiveness\r\n    var max_time_points = null;\r\n    var max_num_plots = null;\r\n\r\n    // maximum plot name length to (hopefully) avoid bad plot alignment in the pane\r\n    var max_plot_name_length = null;\r\n\r\n\t// model ID\r\n\tvar mid = URI(window.location).segment(-1);\r\n\r\n\t// current plots being shown (indices & data)\r\n\tvar plots_selected = [];\r\n\tvar plots_selected_time = new Array(3);\t// a vector of time values for plot {0,1,2}\r\n\tvar plots_selected_data = new Array(3);\t// a matrix of y-values for plot {0,1,2}\r\n\r\n    // zoom scale for current plots\r\n    var plots_selected_zoom_x = new Array(3); // vectors with x-min, x-max for plot {0,1,2}\r\n    var plots_selected_zoom_y = new Array(3); // vectors with y-min, y-max for plot {0,1,2}\r\n\r\n    // plot resolution indicators (-1 do not show)\r\n    var plots_selected_resolution = [];     // resolution as returned by server\r\n\r\n    // number selected indicator (0 do not show)\r\n    var plots_selected_displayed = [];\r\n    var limit_indicator_color = null;\r\n\r\n    // linked plot check box values\r\n    var link_plots = [];\r\n\r\n\t// meta data for plots\r\n\tvar num_plots = null;\r\n\tvar num_included_plots = null;\r\n\tvar plot_name = null;\r\n\tvar x_axis_name = null;\r\n\tvar y_axis_name = null;\r\n\tvar plot_type = null;\r\n\tvar var_include_columns = null;\r\n\t\r\n\t// colors for plots\r\n\tvar sel_color = [];\r\n\tvar focus_color = null;\r\n\r\n\t// pixel adjustments for d3 time series plots\r\n\tvar plot_adjustments = {\r\n\t\tpull_down_height: null,\r\n\t\tpadding_top: null,\r\n\t\tpadding_bottom: null,\r\n\t\tpadding_left: null,\r\n\t\tpadding_right: null,\r\n\t\tx_label_padding: null,\r\n\t\ty_label_padding: null,\r\n\t\tlabel_opacity: null,\r\n\t\tx_tick_freq: null,\r\n\t\ty_tick_freq: null\r\n\t};\r\n\t\r\n\t// variables for d3 plots\r\n\tvar plot = [];\r\n\tvar x_scale = [];\r\n\tvar y_scale = [];\r\n\tvar x_axis = [];\r\n\tvar y_axis = [];\r\n\tvar x_label = [];\r\n\tvar y_label = [];\r\n\r\n\t// mouse-over line for plots\r\n\tvar mouse_over_line = [];\r\n\t\r\n\t// set up initial private variables, user interface\r\n\tmodule.setup = function (SELECTION_1_COLOR, SELECTION_2_COLOR, SEL_FOCUS_COLOR, PLOT_ADJUSTMENTS,\r\n\t                         MAX_TIME_POINTS, MAX_NUM_PLOTS, MAX_PLOT_NAME, variables_metadata, variables_data,\r\n\t                         INCLUDE_VARS)\r\n\t{\r\n\r\n\t\t// set ui constants\r\n\t\tsel_color.push(SELECTION_1_COLOR);\r\n\t\tsel_color.push(SELECTION_2_COLOR);\r\n\t\tfocus_color = SEL_FOCUS_COLOR;\r\n\t\tplot_adjustments.pull_down_height = PLOT_ADJUSTMENTS.PLOTS_PULL_DOWN_HEIGHT;\r\n\t\tplot_adjustments.padding_top = PLOT_ADJUSTMENTS.PADDING_TOP;\r\n\t\tplot_adjustments.padding_bottom = PLOT_ADJUSTMENTS.PADDING_BOTTOM;\r\n\t\tplot_adjustments.padding_left = PLOT_ADJUSTMENTS.PADDING_LEFT;\r\n\t\tplot_adjustments.padding_right = PLOT_ADJUSTMENTS.PADDING_RIGHT;\r\n\t\tplot_adjustments.x_label_padding = PLOT_ADJUSTMENTS.X_LABEL_PADDING;\r\n\t\tplot_adjustments.y_label_padding = PLOT_ADJUSTMENTS.Y_LABEL_PADDING;\r\n\t\tplot_adjustments.label_opacity = PLOT_ADJUSTMENTS.LABEL_OPACITY;\r\n\t\tplot_adjustments.x_tick_freq = PLOT_ADJUSTMENTS.X_TICK_FREQ;\r\n\t\tplot_adjustments.y_tick_freq = PLOT_ADJUSTMENTS.Y_TICK_FREQ;\r\n\r\n\t    // set maximum resolution for plotting\r\n\t    max_time_points = MAX_TIME_POINTS;\r\n\r\n        // set maximum number of plots (per selection)\r\n        max_num_plots = MAX_NUM_PLOTS;\r\n\r\n        // set maximum length of plot names\r\n        max_plot_name_length = MAX_PLOT_NAME;\r\n\r\n        // which variables to actuall plot\r\n        var_include_columns = INCLUDE_VARS;\r\n\r\n\t\t// populate pull down menus and initialize d3 plots\r\n\r\n\t\t// sort out the variable metadata we need\r\n\t\tnum_plots = variables_metadata[0][\"row-count\"];\r\n\t\tnum_included_plots = var_include_columns.length;\r\n\t\tx_axis_name = variables_data[0][\"data\"][1];\r\n\t\ty_axis_name = variables_data[0][\"data\"][2];\r\n\t\tplot_type = variables_data[0][\"data\"][3];\r\n\r\n        // populate plot names\r\n\t\tplot_name = variables_data[0][\"data\"][0];\r\n\r\n        // truncate plot names if too long\r\n        for (var i = 0; i < num_plots; i++) {\r\n\r\n            if (plot_name[i].length > max_plot_name_length) {\r\n                plot_name[i] = plot_name[i].substring(0, max_plot_name_length) + \" ...\";\r\n            }\r\n\r\n        }\r\n\r\n\t\t// init plot order (up to number of plots available)\r\n\t\tfor (var i = 0; i < Math.min(num_included_plots,3); i++) {\r\n\t\t    plots_selected.push(var_include_columns[i]);\r\n\t\t}\r\n\r\n        // initialize zoom level\r\n        for (var i = 0; i < 3; i++) {\r\n            plots_selected_zoom_x[i] = [\"-Inf\", \"Inf\"];\r\n            plots_selected_zoom_y[i] = [\"-Inf\", \"Inf\"];\r\n        }\r\n\r\n        // initialize full resolution and all displayed (do not show)\r\n        plots_selected_displayed = [0, 0, 0];\r\n        plots_selected_resolution = [-1, -1, -1];\r\n\r\n        // initialize check boxes to all false\r\n        link_plots = [0, 0, 0];\r\n\r\n\t\t// remove unused plot pull downs\r\n\t\tfor (var i = num_included_plots; i < 3; i++) {\r\n\t\t    $(\"#dac-select-plot-\" + (i+1)).remove();\r\n\t\t    $(\"#dac-link-plot-\" + (i+1)).remove();\r\n\t\t    $(\"#dac-plots-displayed-\" + (i+1)).remove();\r\n\t\t    $(\"#dac-plots-not-displayed-\" + (i+1)).remove();\r\n\t\t    $(\"#dac-low-resolution-plot-\" + (i+1)).remove();\r\n\t\t    $(\"#dac-full-resolution-plot-\" + (i+1)).remove();\r\n\t\t    $(\"#dac-link-label-plot-\" + (i+1)).remove();\r\n\t\t}\r\n\r\n\t\t// initialize plots as d3 plots\r\n\t\tfor (var i = 0; i < Math.min(num_included_plots,3); ++i) {\r\n\t\t\t\t\r\n\t\t\t// populate pull down menu\r\n\t\t\tdisplay_plot_pull_down.bind($(\"#dac-select-plot-\" + (i+1)))(i);\r\n\r\n\t\t    // bind to link check boxes\r\n\t\t    link_check_box.bind($(\"#dac-link-plot-\" + (i+1)))();\r\n\r\n\t\t\t// actual plot\r\n\t\t\tplot[i] = d3.select(\"#dac-plot-\" + (i+1));\r\n\t\t\t\t\t\r\n\t\t\t// d3 scale (init to empty domain)\r\n\t\t\tx_scale[i] = d3.scale.linear().domain([null,null]);\r\n\t\t\ty_scale[i] = d3.scale.linear().domain([null,null]);\r\n\t\t\t\t\t\r\n\t\t\t// d3 axes\r\n\t\t\tx_axis[i] = d3.svg.axis().scale(x_scale[i]).orient(\"bottom\");\r\n\t\t\ty_axis[i] = d3.svg.axis().scale(y_scale[i]).orient(\"left\");\r\n\t\t\t\t\t\r\n\t\t\t// append axes to plot\r\n\t\t\tplot[i].append(\"g\")\r\n\t\t\t\t.attr(\"class\", \"x axis\");\r\n\t\t\tplot[i].append(\"g\")\r\n\t\t\t\t.attr(\"class\", \"y axis\")\r\n\t\t\t\t.attr(\"transform\", \"translate(\" +\r\n\t\t\t\t\t(plot_adjustments.padding_left +\r\n\t\t\t\t\t plot_adjustments.y_label_padding) + \",0)\");\r\n\r\n\t\t\t// clip rectangle for zooming\r\n\t\t\tplot[i].append(\"defs\").append(\"svg:clipPath\")\r\n\t\t\t\t.attr(\"id\", \"clip\")\r\n\t\t\t\t.append(\"svg:rect\")\r\n\t\t\t\t.attr(\"id\", \"clip-rect\")\r\n\t\t\t\t.attr(\"x\", plot_adjustments.padding_left\r\n\t\t\t\t\t\t + plot_adjustments.y_label_padding)\r\n\t\t\t\t.attr(\"y\", plot_adjustments.padding_top);\r\n\r\n            // mouse-over line\r\n            mouse_over_line[i] = plot[i].append(\"line\")\r\n                                        .attr(\"x1\", plot_adjustments.padding_left +\r\n                                                    plot_adjustments.y_label_padding)\r\n                                        .attr(\"y1\", $(\"#dac-plots\").height()/3 -\r\n                                                    plot_adjustments.pull_down_height -\r\n                                                    plot_adjustments.padding_bottom -\r\n                                                    plot_adjustments.x_label_padding)\r\n                                        .attr(\"x2\", plot_adjustments.padding_left +\r\n                                                    plot_adjustments.y_label_padding)\r\n                                        .attr(\"y2\", plot_adjustments.padding_top)\r\n                                        .style(\"stroke\", \"black\")\r\n                                        .style(\"fill\", \"none\")\r\n                                        .style(\"display\", \"none\");\r\n\r\n\t\t\t// axis labels\r\n\t\t\tx_label[i] = plot[i].append(\"text\")\r\n\t\t  \t\t\t\t\t\t.attr(\"text-anchor\", \"end\")\r\n\t\t\ty_label[i] = plot[i].append(\"text\")\r\n\t\t\t\t\t\t\t\t.attr(\"text-anchor\", \"end\")\r\n\t\t\t\t\t\t\t\t.attr(\"transform\", \"rotate(-90)\");\r\n\r\n\r\n\t   \r\n\t\t}\r\n\t\t\t\t\r\n\t\t// set up initial size, axis labels, etc.\r\n\t\tmodule.draw();\r\n\r\n\t}\r\n\r\n\t// populate pull down menu i in {0,1,2} with plot names\r\n\tfunction display_plot_pull_down(i)\r\n\t{\r\n\t\tthis.empty();\r\n\t\t\r\n\t\t// every pull down contains the list of plot names in the same order\r\n\t\tfor (var j = 0; j != num_plots; ++j)\r\n\t\t{\r\n\t\t    // show included variables only for plots\r\n\t\t    if (var_include_columns.indexOf(j) != -1) {\r\n\r\n\t\t        // generate the pull down (select) in HTML\r\n                var select_item = $('<option value=\"' + j +'\">').appendTo(this);\r\n                select_item.text(plot_name[j]);\r\n\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\t\t// set default option\r\n\t\tthis.val(plots_selected[i])\r\n\t\t\r\n\t\t// define action for changing menu\r\n\t\tthis.change(function()\r\n\t\t\t{\r\n\t\t\t\t// get id of changed menu and new value\r\n\t\t\t\tvar select_id_str = this.id;\r\n\t\t\t\tvar select_id = Number(select_id_str.split(\"-\").pop()) - 1;\r\n\t\t\t\tvar select_value = Number(this.value);\r\n\r\n                // unlink plot\r\n                $(\"#dac-link-plot-\" + (select_id+1).toString()).prop(\"checked\", false);\r\n                link_plots[select_id] = 0;\r\n\r\n                // unzoom plot\r\n                plots_selected_zoom_x[select_id] = [\"-Inf\", \"Inf\"];\r\n                plots_selected_zoom_y[select_id] = [\"-Inf\", \"Inf\"];\r\n\r\n\t\t\t\t// change value of selection\r\n\t\t\t\tplots_selected[select_id] = select_value;\r\n\r\n                // update newly selected plot\r\n                draw_plot(select_id);\r\n\t\t\t});\r\n\r\n\t}\r\n\r\n\t// call back for the link check boxes\r\n\tfunction link_check_box()\r\n\t{\r\n\r\n        // uncheck boxes, if checked\r\n        for (j = 0; j < Math.min(num_included_plots, 3); j ++) {\r\n            $(\"#dac-link-plot-\" + (j+1).toString()).prop(\"checked\", false);\r\n        };\r\n\r\n\t    // called when user checks or unchecks a link box\r\n\t    this.change(function () {\r\n\r\n\t        // get check box state\r\n\t        var check_id_str = this.id;\r\n\t        var check_id = Number(check_id_str.split(\"-\").pop()) - 1;\r\n\t        var checked = this.checked;\r\n\r\n            // does the user want to link a plot?\r\n            if (!checked) {\r\n\r\n                // no -- unlink plot\r\n                link_plots[check_id] = 0;\r\n\r\n            } else {\r\n\r\n                // yes -- check compatibility with previously checked links\r\n                var compatible_link = true;\r\n                for (j = 0; j < Math.min(num_included_plots, 3); j++) {\r\n\r\n                    // only check axes that are linked\r\n                    if (link_plots[j] != 0) {\r\n\r\n                        // are axes same length?\r\n                        if (plots_selected_time[j].length == plots_selected_time[check_id].length) {\r\n\r\n                            // compute difference between time vectors\r\n                            var abs_diff = 0;\r\n                            for (k = 0; k < plots_selected_time[j].length; k++) {\r\n                                abs_diff = abs_diff + Math.abs(plots_selected_time[j][k] -\r\n                                            plots_selected_time[check_id][k]);\r\n                            }\r\n\r\n                            // are vectors different?\r\n                            if (abs_diff != 0) {\r\n                                compatible_link = false;\r\n                            }\r\n\r\n                        } else {\r\n                            compatible_link = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // is the link compatible with previous links?\r\n                if (compatible_link) {\r\n\r\n                    // yes -- add to list\r\n                    link_plots[check_id] = 1;\r\n\r\n                } else {\r\n\r\n                    // no -- uncheck box and alert user\r\n                    $(\"#dac-link-plot-\" + (check_id+1).toString()).prop(\"checked\", false);\r\n                    dialog.ajax_error(\"This plot cannot be linked to previous plots because the \" +\r\n                                  \"x-axes are incompatible.  This can sometimes occur if one plot is \" +\r\n                                  \"zoomed relative to another.\")(\"\",\"\",\"\");\r\n                }\r\n            }\r\n\t    });\r\n\r\n\t}\r\n\r\n\t// update selections based on other input\r\n\tmodule.change_selections = function(plot_selections)\r\n\t{\r\n\r\n        // change number of plots to match the number of selections\r\n        num_plots = Math.min(3,plot_selections.length);\r\n\r\n\t\t// update selections/unhide plots if necessary\r\n\t\tfor (var i = 0; i < Math.min(num_plots,3); ++i) {\r\n\r\n\t\t    // everything is different so we also unlink the plots\r\n\t\t    $(\"#dac-link-plot-\" + (i+1).toString()).prop(\"checked\", false);\r\n\t\t    link_plots[i] = 0;\r\n\r\n\t\t    // unhide everything (might have been previously hidden)\r\n\t\t    $(\"#dac-plot-\" + (i+1)).show();\r\n\t\t    $(\"#dac-select-plot-\" + (i+1)).show();\r\n\t\t    $(\"#dac-link-plot-\" + (i+1)).show();\r\n\t\t    $(\"#dac-link-label-plot-\" + (i+1)).show();\r\n\r\n            // show display indicator\r\n            plots_selected_displayed[i] = 1;\r\n\r\n\t\t\t$(\"#dac-select-plot-\" + (i+1)).val(plot_selections[i]).change();\r\n\r\n\t\t}\r\n\r\n\t\t// hide last plots if user selected less than three\r\n        for (var i = num_plots; i < 3; i++) {\r\n\r\n            // hide dac-plots that don't exist in selection\r\n            $(\"#dac-plot-\" + (i+1)).hide();\r\n\t\t    $(\"#dac-select-plot-\" + (i+1)).hide();\r\n\t\t    $(\"#dac-link-plot-\" + (i+1)).hide();\r\n\t\t    $(\"#dac-low-resolution-plot-\" + (i+1)).hide();\r\n\t\t    $(\"#dac-full-resolution-plot-\" + (i+1)).hide();\r\n\t\t    $(\"#dac-link-label-plot-\" + (i+1)).hide();\r\n\t\t    $(\"#dac-plots-displayed-\" + (i+1)).hide();\r\n\t\t    $(\"#dac-plots-not-displayed-\" + (i+1)).hide();\r\n\r\n        }\r\n\r\n\t}\r\n\t\r\n\t// refresh all plots, including size, scale, etc.\r\n\tmodule.draw = function()\r\n\t{\r\n\t\t\r\n\t\t// draw each plot to size of container\r\n\t\tvar width = $(\"#dac-plots\").width();\r\n\t\tvar height = $(\"#dac-plots\").height()/3 -\r\n\t\t\tplot_adjustments.pull_down_height;\r\n\t\t\r\n\t\t// compute number of tick marks needed\r\n\t\tvar num_x_ticks = Math.round(width/plot_adjustments.x_tick_freq);\r\n\t\tvar num_y_ticks = Math.round(height/plot_adjustments.y_tick_freq);\r\n\t\t\r\n\t\t// the sizes and ranges of the plots are all the same\r\n\t\tfor (var i = 0; i < Math.min(num_included_plots,3); ++i) {\r\n\t\t\t\t   \r\n\t\t\t// change scale\r\n\t\t\tx_scale[i].range([plot_adjustments.padding_left + \r\n\t\t\t\tplot_adjustments.y_label_padding, \r\n\t\t\t\twidth - plot_adjustments.padding_right]);\r\n\t\t\ty_scale[i].range([height - plot_adjustments.padding_bottom -\r\n\t\t\t\tplot_adjustments.x_label_padding, \r\n\t\t\t\tplot_adjustments.padding_top]);\r\n\t\t\t\r\n\t\t\t// change plot size\r\n\t\t\tplot[i].attr(\"width\", width)\r\n\t\t\t\t   .attr(\"height\", height);\r\n\t\t\t\r\n\t\t\t// update size of clip rectangle\r\n\t\t\tplot[i].selectAll(\"#clip-rect\")\r\n\t\t\t\t.attr(\"width\", width - plot_adjustments.padding_left\r\n\t\t\t\t\t\t\t\t     - plot_adjustments.y_label_padding\r\n\t\t\t\t\t\t\t\t     - plot_adjustments.padding_right)\r\n\t\t\t\t.attr(\"height\", height - plot_adjustments.padding_bottom\r\n\t\t\t\t\t\t\t\t\t   - plot_adjustments.x_label_padding\r\n\t\t\t\t\t\t\t\t\t   - plot_adjustments.padding_top);\r\n\t\t\t// update mouse-over line plot limits\r\n            mouse_over_line[i].attr(\"x1\", plot_adjustments.padding_left +\r\n                                          plot_adjustments.y_label_padding)\r\n                              .attr(\"y1\", $(\"#dac-plots\").height()/3 -\r\n                                          plot_adjustments.pull_down_height -\r\n                                          plot_adjustments.padding_bottom -\r\n                                          plot_adjustments.x_label_padding)\r\n                              .attr(\"x2\", plot_adjustments.padding_left +\r\n                                          plot_adjustments.y_label_padding)\r\n                              .attr(\"y2\", plot_adjustments.padding_top);\r\n\r\n\t\t\t// change x axis label positions\r\n\t\t\tx_label[i].attr(\"x\", width - plot_adjustments.padding_right)\r\n\t\t\t\t      .attr(\"y\", height - plot_adjustments.x_label_padding);\r\n\t\t\t\t      \t\t              \t      \t\t              \r\n\t\t\ty_label[i].attr(\"x\", -plot_adjustments.padding_top)\r\n\t\t\t\t\t  .attr(\"y\", plot_adjustments.y_label_padding);\r\n\t\t\t\r\n\t\t\t// update number of ticks x and y axes positions\r\n\t\t\tx_axis[i].ticks(num_x_ticks);\r\n\t\t\tplot[i].selectAll(\"g.x.axis\")\r\n\t\t\t\t   .attr(\"transform\", \"translate(0,\" + (height - \r\n\t\t\t\t   \t\t plot_adjustments.padding_bottom -\r\n\t\t\t\t   \t\t plot_adjustments.x_label_padding) + \")\");\r\n\t\t\ty_axis[i].ticks(num_y_ticks);\r\n\r\n\t\t    // draw actual plot\r\n\t\t\tdraw_plot(i);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t// this routine sets off the following actions:\r\n\t// (1) refresh data from server, sub-sampled by row (selection) and column (resolution)\r\n\t// (2) update data in d3\r\n\t// (3) re-draw d3 plots\r\n\t// (4) update indicators for plot\r\n\tfunction draw_plot(i)\r\n\t{\r\n\r\n        // first, we refresh the data\r\n        // since this is an ajax call, we only continue after the\r\n        // data has been retrieved\r\n\r\n\t    // get rows of data to pass to server\r\n\t    var refresh_selections = [-2, -1];  // indicates empty python list\r\n\t    var selection_1 = selections.sel_1();\r\n\t    var selection_2 = selections.sel_2();\r\n\r\n\t    // starting with selection 1, up to max number of plots\r\n\t    for (var j = 0; j < Math.min(selection_1.length, max_num_plots); j++) {\r\n\t        refresh_selections.push (selection_1[j]);\r\n\t    }\r\n\r\n\t    // finishing with selection 2, up to max number of plots\r\n\t    for (var j = 0; j < Math.min(selection_2.length, max_num_plots); j++) {\r\n\t        refresh_selections.push (selection_2[j]);\r\n\t    }\r\n\r\n        // if selection is non-empty show display indicator\r\n        if (refresh_selections.length == 2) {\r\n            plots_selected_displayed[i] = 0;\r\n        } else {\r\n            plots_selected_displayed[i] = 1;\r\n        }\r\n\r\n        // call to server to get subsampled data\r\n        client.get_model_command(\r\n        {\r\n            mid: mid,\r\n            type: \"DAC\",\r\n            command: \"subsample_time_var\",\r\n            parameters: [i, plots_selected[i], refresh_selections, max_time_points,\r\n                         plots_selected_zoom_x[i][0], plots_selected_zoom_x[i][1]],\r\n            success: function (result)\r\n            {\r\n                // recover plot id\r\n                var plot_id = result[\"plot_id\"];\r\n\r\n                // save new data\r\n                plots_selected_time[plot_id] = result[\"time_points\"];\r\n                plots_selected_data[plot_id] = result[\"var_data\"];\r\n\r\n                // save resolution indicator (for null selection do not show indicator)\r\n                if (plots_selected_data[plot_id].length > 0)\r\n                {\r\n                    plots_selected_resolution[plot_id] = result[\"resolution\"];\r\n                } else {\r\n                    plots_selected_resolution[plot_id] = -1;\r\n                }\r\n\r\n                // now update data in d3\r\n                update_data_d3(i);\r\n\r\n                // then re-draw d3 plot\r\n                draw_plot_d3(i);\r\n\r\n                // update indicators for this plot\r\n                update_indicators(i);\r\n\r\n            },\r\n            error: function ()\r\n            {\r\n                dialog.ajax_error ('Server failure: could not subsample variable data.')(\"\",\"\",\"\");\r\n            }\r\n        });\r\n\r\n\t}\r\n\r\n\t// updates d3 stored data for plots\r\n\tfunction update_data_d3(i)\r\n\t{\r\n\t\t\t\t\t\t\r\n\t\t// remove any data already present\r\n\t\tplot[i].selectAll(\".curve\").remove();\r\n\r\n\t\t// remove focus curve if present\r\n\t\tplot[i].selectAll(\".focus\").remove();\r\n\r\n\t\t// generate new data for each selection\t\r\n\t\tif ((selections.len_sel_1() > 0) || (selections.len_sel_2() > 0)) {\r\n\r\n\t\t\t// update scale domain\r\n\t\t\tset_default_domain(i);\r\n\t\t\t           \r\n\t\t\t// update data (only Curve data is implemented so far)\r\n\t\t\tif ($.trim(plot_type[plots_selected[i]]) == 'Curve') {\r\n\r\n\t\t\t\t// set (or re-set) zoom brushing & vertical line\r\n\t\t\t    plot[i].selectAll(\"g.brush\").remove();\r\n\t\t\t    plot[i].append(\"g\")\r\n\t\t\t\t       .attr(\"class\", \"brush\")\r\n\t\t\t\t       .call(d3.svg.brush()\r\n\t\t\t\t       .x(x_scale[i])\r\n\t\t\t\t       .y(y_scale[i])\r\n\t\t\t\t       .on(\"brushend\", zoom))\r\n\t\t\t\t       .on(\"mouseover\", vertical_line_start)\r\n\t\t\t\t       .on(\"mousemove\", vertical_line_move)\r\n\t\t\t\t       .on(\"mouseout\", vertical_line_end);\r\n\r\n\t\t\t\t// set selectable curves (note brush is under selection)\r\n\t\t\t\tplot[i].selectAll(\".curve\")\r\n\t\t\t\t\t   .data(generate_curve_data(i))\r\n\t\t\t\t\t   .attr(\"class\", \"curve\")\r\n\t\t\t\t\t   .enter()\r\n\t\t\t\t\t   .append(\"path\")\r\n\t\t\t\t\t   .attr(\"class\", \"curve\")\r\n\t\t\t\t\t   .attr(\"stroke\", function(d) { return sel_color[d[0][2]]; })\r\n\t\t\t\t\t   .attr(\"stroke-width\", 1)\r\n\t\t\t\t\t   .attr(\"fill\", \"none\")\r\n\t\t\t\t\t   .on(\"click\", select_curve);\r\n\r\n\t\t\t    // draw focus curve (on top of other curves) if data is available\r\n\t\t\t    if ((selections.focus() != null) &&\r\n\t\t\t        (focus_curve_ind() != -1)) {\r\n\r\n\t\t\t        // draw focus curve\r\n\t\t\t        plot[i].selectAll(\".focus\")\r\n\t\t\t               .data([d3.transpose([plots_selected_time[i],\r\n\t\t\t                                    plots_selected_data[i][focus_curve_ind()]])])\r\n\t\t\t               .attr(\"class\", \"focus\")\r\n\t\t\t               .enter()\r\n\t\t\t               .append(\"path\")\r\n\t\t\t               .attr(\"class\", \"focus\")\r\n\t\t\t               .attr(\"stroke\", focus_color)\r\n\t\t\t               .attr(\"stroke-width\", 2)\r\n\t\t\t               .attr(\"fill\", \"none\")\r\n\t\t\t               .on(\"click\", deselect_curve);\r\n\r\n\t\t\t    }\r\n\r\n\t\t\t} else {\r\n\t\t\t\tdialog.ajax_error ('Only \"Curve\" type plots are implemented.')(\"\",\"\",\"\");\r\n\t\t\t};\r\n\r\n\t\t};\r\n\t}\r\n\t\r\n\t// set default scale for curves\r\n\tfunction set_default_domain(i)\r\n\t{\r\n\r\n\t\t// update x-axis domain\r\n\t\tif (plots_selected_zoom_x[i][0] == \"-Inf\" || plots_selected_zoom_x[i][1] == \"Inf\") {\r\n\r\n\t\t    // undetermined scale, must look at data\r\n\t\t    x_scale[i].domain([Math.min.apply(Math, plots_selected_time[i]),\r\n\t\t\t\t\t\t       Math.max.apply(Math, plots_selected_time[i])]);\r\n\t\t} else {\r\n\r\n\t\t    // scale already known\r\n\t\t    x_scale[i].domain(plots_selected_zoom_x[i]);\r\n\r\n\t\t}\r\n\r\n\t\t// get y-axis min and max\r\n\t\tif (plots_selected_zoom_y[i][0] == \"-Inf\" || plots_selected_zoom_y[i][1] == \"Inf\") {\r\n\r\n\t\t    // undetermined scale, look at data\r\n            var plot_min = Infinity;\r\n            var plot_max = -Infinity;\r\n            for (var j = 0; j < plots_selected_data[i].length; j++) {\r\n                plot_min = Math.min(plot_min, Math.min.apply(Math,\r\n                    plots_selected_data[i][j]));\r\n                plot_max = Math.max(plot_max, Math.max.apply(Math,\r\n                    plots_selected_data[i][j]));\r\n            };\r\n\r\n            // if lower limit was non-infinite reset to finite value\r\n            if (plots_selected_zoom_y[i][0] != \"-Inf\") {\r\n                plot_min = plots_selected_zoom_y[i][0];\r\n            }\r\n\r\n            // if upper limit was non-infinite reset to finite value\r\n            if (plots_selected_zoom_y[i][1] != \"Inf\") {\r\n                plot_max = plots_selected_zoom_y[i][1];\r\n            }\r\n\r\n            // set scale\r\n            y_scale[i].domain([plot_min, plot_max]);\r\n\r\n\t\t} else {\r\n\r\n\t\t    // known scale\r\n\t\t    y_scale[i].domain(plots_selected_zoom_y[i]);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t// generate a d3 style version of the data for a selection of curves,\r\n\t// which is an array of arrays of curves, where each curve is an (x,y,c) array\r\n\t// where x,y is position and c is color\r\n\t// NOTE: in the second position we now push the curve id for use by the selection\r\n\t// routines (all the rest are stil color)\r\n\tfunction generate_curve_data (i)\r\n\t{\r\n\r\n\t\t// make array of indices into selection colors\r\n\t\tvar sel_1_color = [];\r\n\t\tvar sel_2_color = [];\r\n\t\tfor (var j = 0; j < plots_selected_time[i].length; j++) {\r\n\t\t    sel_1_color.push(0);\r\n\t\t\tsel_2_color.push(1);\r\n\t\t}\r\n\r\n\t    // get selections\r\n\t    var selection_1 = selections.sel_1();\r\n\t    var selection_2 = selections.sel_2();\r\n\r\n\t\t// make array of data for selection 1\r\n\t\tvar curve_data = [];\r\n\t\tfor (var j = 0; j < Math.min(selection_1.length, max_num_plots); j++) {\r\n\t\t\tcurve_data.push(d3.transpose([plots_selected_time[i], \r\n\t\t\t\t\t  plots_selected_data[i][j],\r\n\t\t\t\t\t  sel_1_color]));\r\n\t\t};\r\n\t\t\t\t\r\n\t\t// add more data for selection 2\r\n\t\tfor (var j = 0; j < Math.min(selection_2.length, max_num_plots); j++) {\r\n\t\t\tcurve_data.push(d3.transpose([plots_selected_time[i], \r\n\t\t\t\t\t  plots_selected_data[i][j + Math.min(selection_1.length, max_num_plots)],\r\n\t\t\t\t\t  sel_2_color]));\r\n\t\t}; \r\n\t\t\r\n\t\treturn curve_data;\r\n\t}\r\n\r\n\t// draw a plot with specific axis, labels, etc.\r\n\tfunction draw_plot_d3(i)\r\n\t{\r\n\r\n\t\t// draw plots (if necessary re-draw)\r\n\t\tif ($.trim(plot_type[plots_selected[i]]) == 'Curve') {\r\n\r\n\t\t\tplot[i].selectAll(\"path\")\r\n\t\t\t\t   .attr(\"d\", d3.svg.line().interpolate(\"linear\")\r\n\t\t\t\t   \t\t\t    .x(function(d) { return x_scale[i](d[0]); })\r\n\t\t\t\t   \t\t\t    .y(function(d) { return y_scale[i](d[1]); }))\r\n\t\t\t\t   .attr(\"clip-path\", \"url(#clip)\");\r\n\r\n\t\t} else {\r\n\r\n\t\t    // note: this will never happen using the PTS wizard\r\n\t\t\tdialog.ajax_error ('Only \"Curve\" type plots are implemented.')(\"\",\"\",\"\");\r\n\t\t};\r\n\r\n\t\t// label axes (if necessary re-draw)\r\n\t\tx_label[i].text(x_axis_name[plots_selected[i]]);\r\n\t\ty_label[i].text(y_axis_name[plots_selected[i]]);\r\n\r\n\t\t// draw axes (re-draws)\r\n\t\tplot[i].selectAll(\"g.x.axis\").call(x_axis[i])\r\n\t\t\t   .selectAll(\".domain\").attr(\"clip-path\",null);\r\n\t\tplot[i].selectAll(\"g.y.axis\").call(y_axis[i])\r\n\t\t\t   .selectAll(\".domain\").attr(\"clip-path\",null);\r\n\r\n\t}\r\n\r\n    // update indicators for current plot\r\n    function update_indicators(i)\r\n    {\r\n        // update resolution indicator\r\n        toggle_resolution (i, plots_selected_resolution[i]);\r\n\r\n        // update selection max indicator\r\n        if (plots_selected_displayed[i] == 0)\r\n        {\r\n\r\n            // do not show display indicator\r\n            $(\"#dac-plots-displayed-\" + (i+1)).hide();\r\n            $(\"#dac-plots-not-displayed-\" + (i+1)).hide();\r\n\r\n        }\r\n        else if (limit_indicator_color == \"green\") {\r\n\r\n            // all plots displayed\r\n\t\t    $(\"#dac-plots-not-displayed-\" + (i+1)).hide();\r\n\t\t    $(\"#dac-plots-displayed-\" + (i+1)).show();\r\n\r\n\t\t} else {\r\n\r\n\t\t    // some plot not displayed\r\n\t\t    $(\"#dac-plots-displayed-\" + (i+1)).hide();\r\n\t\t    $(\"#dac-plots-not-displayed-\" + (i+1)).css(\"color\", limit_indicator_color);\r\n\t\t    $(\"#dac-plots-not-displayed-\" + (i+1)).show();\r\n\r\n\t\t}\r\n    }\r\n\r\n    // toggle low/full resolution indicator for a plot\r\n    function toggle_resolution (i, resolution)\r\n    {\r\n\r\n        if (resolution == -1) {\r\n\r\n            // do not show resolution indicator\r\n            $(\"#dac-low-resolution-plot-\" + (i+1)).hide();\r\n            $(\"#dac-full-resolution-plot-\" + (i+1)).hide();\r\n\r\n        } else if (resolution > 1) {\r\n\r\n            // turn on low resolution warning/turn off full resolution\r\n            $(\"#dac-low-resolution-plot-\" + (i+1)).show();\r\n            $(\"#dac-full-resolution-plot-\" + (i+1)).hide();\r\n\r\n         } else {\r\n\r\n             // turn off low resolution warning/turn on full resolution\r\n            $(\"#dac-low-resolution-plot-\" + (i+1)).hide();\r\n            $(\"#dac-full-resolution-plot-\" + (i+1)).show();\r\n\r\n         }\r\n\r\n    }\r\n\r\n\t// zoom handler call back\r\n\tfunction zoom()\r\n\t{\r\n\t\t// get current plot index\r\n\t\tvar plot_id_str = this.parentNode.id;\r\n\t\tvar plot_id = Number(plot_id_str.split(\"-\").pop()) - 1;\r\n\r\n\t\t// find zoomed area\r\n\t\tvar extent = d3.event.target.extent();\r\n\r\n\t\t// remove gray selection box\r\n\t\td3.event.target.clear();\r\n\t\td3.select(this).call(d3.event.target);\r\n\r\n        // make a list of plots to update\r\n        var plots_to_update = identify_plots_to_update(plot_id);\r\n\r\n\t\t// was it an valid zoom?\r\n\t\tif (extent[0][0] != extent[1][0] &&\r\n\t\t\textent[0][1] != extent[1][1])\r\n\t\t\t{\r\n\r\n                // re-scale y-axis only for actual active plot\r\n                var active_plot = plot_id;\r\n\r\n                // update all linked plots\r\n                for (j = 0; j < 3; j++) {\r\n\r\n                    // should we update this plot?\r\n                    if (plots_to_update[j] == 1) {\r\n\r\n                        // set zoom level (all linked same x)\r\n                        plots_selected_zoom_x[j] = [extent[0][0], extent[1][0]];\r\n\r\n                        // actual zoomed area might have a different y\r\n                        if (j == active_plot) {\r\n\r\n                            // check if user zoomed to lower edge of y-scale\r\n                            var lower_edge = extent[0][1];\r\n                            if (lower_edge == y_scale[j].domain()[0]) {\r\n\r\n                                // change to -Inf to get any new data from zooming at higher resolution\r\n                                lower_edge = \"-Inf\";\r\n                            }\r\n\r\n                            // check if user zoomed to upper edge of y-scale\r\n                            var upper_edge = extent[1][1];\r\n                            if (upper_edge == y_scale[j].domain()[1]) {\r\n\r\n                                // change to Inf to get new data\r\n                                upper_edge = \"Inf\";\r\n                            }\r\n\r\n                            plots_selected_zoom_y[j] = [lower_edge, upper_edge];\r\n                        }\r\n\r\n                        // re-draw plot\r\n                        draw_plot(j);\r\n\r\n                    }\r\n                }\r\n\r\n\t\t} else {  // reset zoom\r\n\r\n            // reset all linked plots\r\n            for (j = 0; j < 3; j++) {\r\n\r\n                // is this a plot to be updated\r\n                if (plots_to_update[j] == 1) {\r\n\r\n                    // re-set plot to full scale\r\n                    plots_selected_zoom_x[j] = [\"-Inf\", \"Inf\"];\r\n                    plots_selected_zoom_y[j] = [\"-Inf\", \"Inf\"];\r\n\r\n                    // re-draw plot\r\n                    draw_plot(j);\r\n\r\n                }\r\n            }\r\n\t\t};\r\n\t};\r\n\r\n    // get a list of plots to update, including linked plots\r\n    function identify_plots_to_update (i) {\r\n\r\n        // make a list of plots to update\r\n        var plots_to_update = [0, 0, 0];\r\n        if (link_plots[i] == 0) {\r\n\r\n            // zoomed plot is not linked\r\n            plots_to_update[i] = 1;\r\n\r\n        } else {\r\n\r\n            // zoomed plot is linked\r\n            plots_to_update = link_plots;\r\n        }\r\n\r\n        return plots_to_update;\r\n    }\r\n\r\n\t// user hovered over a curve\r\n\tfunction select_curve (d,i)\r\n\t{\r\n\r\n\t    // find index of curve selected\r\n\t    var curve_id = null;\r\n        if (d[0][2] == 0) {\r\n\r\n            // we're in selection 1\r\n            curve_id = selections.sel_1()[i];\r\n\r\n        } else {\r\n\r\n            // we're in selection 2\r\n            curve_id = selections.sel_2()[i - Math.min(selections.len_sel_1(), max_num_plots)];\r\n\r\n        }\r\n\r\n        // highlight selected curve in other views\r\n        var selectionEvent = new CustomEvent(\"DACActiveSelectionChanged\", { detail: {\r\n\t\t\t\t\t                         active_sel: curve_id,\r\n\t\t\t\t\t                         active: true} });\r\n        document.body.dispatchEvent(selectionEvent);\r\n\r\n\t}\r\n\r\n\t// user left curve\r\n\tfunction deselect_curve (d,i)\r\n\t{\r\n\r\n\t    // dehighlight selected curve\r\n        var selectionEvent = new CustomEvent(\"DACActiveSelectionChanged\", { detail: {\r\n\t\t\t\t\t                         active_sel: null,\r\n\t\t\t\t\t                         active: true} });\r\n        document.body.dispatchEvent(selectionEvent);\r\n\r\n\t}\r\n\r\n\t// find local index of curve in focus\r\n\tfunction focus_curve_ind ()\r\n\t{\r\n\t    // get index of curve in focus\r\n\t    var curve_in_focus = selections.focus();\r\n\r\n\t    // return local index of curve\r\n\t    var curve_in_focus_ind = -1;\r\n\r\n\t    // find curve index, if not null\r\n\t    var ind_sel_1 = selections.in_sel_1(curve_in_focus);\r\n\t    var ind_sel_2 = selections.in_sel_2(curve_in_focus);\r\n\t    if (ind_sel_1 != -1) {\r\n\r\n\t        // check to make sure curve is in dataset\r\n\t        if (ind_sel_1 < max_num_plots) {\r\n\t            curve_in_focus_ind = ind_sel_1;\r\n\t        }\r\n\r\n\t    } else if (ind_sel_2 != -1) {\r\n\r\n\t        // check to make sure curve is in dataset\r\n\t        if (ind_sel_2 < max_num_plots) {\r\n\t            curve_in_focus_ind = ind_sel_2 + Math.min(max_num_plots, selections.len_sel_1());\r\n\t        }\r\n\r\n\t    }\r\n\r\n\t    return curve_in_focus_ind;\r\n\t}\r\n\r\n    // user sitting over a plot\r\n    function vertical_line_start ()\r\n    {\r\n        // identify plot\r\n\t\tvar plot_id_str = this.parentNode.id;\r\n\t\tvar plot_id = Number(plot_id_str.split(\"-\").pop()) - 1;\r\n\r\n        // identify x position in plot\r\n        var x_coord = d3.mouse(this)[0];\r\n\r\n        // make a list of plots to update\r\n        var plots_to_update = identify_plots_to_update(plot_id);\r\n\r\n        // update vertical lines for all linked plots\r\n        for (i=0; i<3; i++) {\r\n\r\n            if (plots_to_update[i] == 1) {\r\n\r\n                // update vertical line position and display\r\n                mouse_over_line[i].attr(\"x1\", x_coord)\r\n                                  .attr(\"x2\", x_coord)\r\n                                  .style(\"display\", \"inline\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // user moving over a plot\r\n    function vertical_line_move ()\r\n    {\r\n        // identify plot\r\n\t\tvar plot_id_str = this.parentNode.id;\r\n\t\tvar plot_id = Number(plot_id_str.split(\"-\").pop()) - 1;\r\n\r\n        // identify x position in plot\r\n        var x_coord = d3.mouse(this)[0];\r\n\r\n        // make a list of plots to update\r\n        var plots_to_update = identify_plots_to_update(plot_id);\r\n\r\n        // update vertical lines for all linked plots\r\n        for (i=0; i<3; i++) {\r\n\r\n            if (plots_to_update[i] == 1) {\r\n\r\n                // reposition vertical line\r\n                mouse_over_line[i].attr(\"x1\", x_coord)\r\n                                  .attr(\"x2\", x_coord)\r\n            }\r\n        }\r\n    }\r\n\r\n    // user out of plot\r\n    function vertical_line_end ()\r\n    {\r\n        // identify plot\r\n\t\tvar plot_id_str = this.parentNode.id;\r\n\t\tvar plot_id = Number(plot_id_str.split(\"-\").pop()) - 1;\r\n\r\n        // make a list of plots to update\r\n        var plots_to_update = identify_plots_to_update(plot_id);\r\n\r\n        // update vertical lines for all linked plots\r\n        for (i=0; i<3; i++) {\r\n\r\n            if (plots_to_update[i] == 1) {\r\n\r\n                // hide vertical line\r\n                mouse_over_line[i].style(\"display\", \"none\");\r\n            }\r\n        }\r\n    }\r\n\r\n\t// update data/plots\r\n\tmodule.update_plots = function ()\r\n\t{\r\n\r\n\t\t// update plot limit indicator color\r\n\t\tlimit_indicator_color = \"green\";\r\n\t\tif ((selections.len_sel_1() > max_num_plots) & (selections.len_sel_2() > max_num_plots)) {\r\n\t\t    limit_indicator_color = \"purple\";\r\n\t\t} else if (selections.len_sel_1() > max_num_plots) {\r\n\t\t    limit_indicator_color = \"red\";\r\n\t\t} else if (selections.len_sel_2() > max_num_plots) {\r\n\t\t    limit_indicator_color = \"blue\";\r\n\t\t}\r\n\r\n        // unzoom plots (leave linked)\r\n        for (i=0; i < num_plots; i++) {\r\n\r\n            // unzoom plots\r\n            plots_selected_zoom_x[i] = [\"-Inf\", \"Inf\"];\r\n            plots_selected_zoom_y[i] = [\"-Inf\", \"Inf\"];\r\n\r\n        }\r\n\r\n\t\t// re-draw all plots\r\n\t\tmodule.draw();\r\n\t}\r\n\t\r\n\treturn module;\r\n};\r\n\r\nexport default module;","/*\r\nCopyright 2013, Sandia Corporation. Under the terms of Contract\r\nDE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains certain\r\nrights in this software.\r\n*/\r\n\r\nimport selections from \"./dac-manage-selections.js\";\r\nimport $ from \"../../../slycat/node_modules/jquery\";\r\nimport d3 from \"../../../slycat/node_modules/d3\";\r\n\r\n() =>\r\n{\r\n\t// public functions will be returned via the module variable\r\n\tvar module = {};\r\n\r\n\t// actual meta data table\r\n\tvar table_metadata = [];\r\n\t\r\n\t// slick grid and data views\r\n\tvar data_view;\r\n\tvar grid_view;\r\n\t\r\n\t// slick grid columns and rows\r\n\tvar grid_columns = [];\r\n\tvar grid_rows = [];\r\n\t\r\n\t// slick grid options\r\n\tvar grid_options = {\r\n    \tenableColumnReorder: false,\r\n    \tmultiSelect: false\r\n  \t};\r\n\r\n\t\r\n\t// populate slick grid's column metadata\r\n\tfunction make_column(id_index, column_index)\r\n\t{\r\n\t\treturn {\r\n\t\t\tid : id_index,\r\n\t\t\tfield : id_index,\r\n\t\t\tname : table_metadata[\"column-names\"][column_index],\r\n\t\t\tsortable : true,\r\n\t\t\ttoolTip : table_metadata[\"column-names\"][column_index]\r\n\t\t};\r\n\t}\r\n\t\r\n\t// load grid data and set up colors for selections\r\n\tmodule.setup = function (metadata, data, include_columns)\r\n\t{\r\n\r\n\t\t// get number of rows and total available columns in data table\r\n\t\tvar num_rows = data[0][\"data\"][0].length;\r\n\t\tvar avail_cols = data[0][\"data\"].length;\r\n\r\n\t    // set number of columns to use\r\n\t    var num_cols = include_columns.length;\r\n\r\n\t\t// set up slick grid column names\r\n\t\ttable_metadata = metadata[0];\r\n\t\tfor (var i = 0; i != num_cols; i++) {\r\n\t\t\tgrid_columns.push(make_column(i, include_columns[i]));\r\n\t\t}\r\n\r\n\t\t// produce new data table with correct columns\r\n\t\ttable_data = [];\r\n\t\tfor (var i = 0; i != num_cols; i++) {\r\n\t\t    table_data.push(data[0][\"data\"][include_columns[i]])\r\n\t\t}\r\n\r\n\t\t// produce a vector of sequential id for table rows and a zero vector\r\n\t\tvar row_id = [];\r\n\t\tvar zero_vec = [];\r\n\t\tfor (var i = 0; i != num_rows; i++) {\r\n\t\t\trow_id.push(i);\r\n\t\t\tzero_vec.push(0);\r\n\t\t}\r\n\r\n\t\t// add two columns to data, unique id and selection mode\r\n\t\ttable_data.push(row_id);\r\n\t\ttable_data.push(zero_vec);\r\n\t\tgrid_rows = d3.transpose(table_data);\r\n\r\n\t\t// set up slick grid\r\n\t\tdata_view = new Slick.Data.DataView();\r\n\t\tgrid_view = new Slick.Grid(\"#dac-datapoints-table\", data_view,\r\n\t\t\t\t\t\t\t        grid_columns, grid_options);\r\n\t\t\t\t\r\n\t\t// keep track of shift or meta key\r\n\t\tgrid_view.onClick.subscribe(one_row_selected);\r\n\t\t\t\t\r\n\t\t// set table data (second to last column is ids)\r\n\t\tdata_view.setItems(grid_rows, num_cols);\r\n\t\t\t\t\r\n\t\t// set up row selection\r\n\t\tgrid_view.setSelectionModel (new Slick.RowSelectionModel());\r\n\t\t//grid_view.onSelectedRowsChanged.subscribe(row_selected);\r\n\t\t\t\t\r\n\t\t// helpers for grid to respond to data_view changes\r\n\t\tdata_view.onRowCountChanged.subscribe(change_rows);\r\n\t\tdata_view.onRowsChanged.subscribe(change_cols);\r\n\r\n  \t\t// update meta data function to accommodate multiple selection classes\r\n  \t\tdata_view.getItemMetadata = color_rows(data_view.getItemMetadata);\r\n  \t\t\t\t\r\n  \t\t// add sorting\r\n  \t\tgrid_view.onSort.subscribe(col_sort);\r\n  \t\t\t\t\r\n\t\t// fit table into container\r\n\t\tmodule.resize();\r\n\r\n\t}\r\n\r\n\t// single row selection\r\n\tfunction one_row_selected(e, args) {\r\n\r\n\t    // pass along shift/meta key information\r\n\t\tselections.key_flip(e.shiftKey, e.metaKey);\r\n\r\n\t\t// convert row clicked to data table row\r\n\t\tvar data_clicked = convert_row_ids([args.row])[0];\r\n\r\n        // check if row is in the subset\r\n        if (selections.in_subset(data_clicked)) {\r\n\r\n            // make sure we are in a selection mode\r\n            if (selections.sel_type() == 1 ||\r\n                selections.sel_type() == 2) {\r\n\r\n                // check if row is already selected\r\n                // update selection and/or focus\r\n                selections.update_sel_focus(data_clicked);\r\n\r\n            // in zoom or subset mode, we can still do focus/de-focus\r\n            } else if (selections.sel_type() == 0 ||\r\n                       selections.sel_type() == 3 ) {\r\n\r\n                selections.change_focus(data_clicked);\r\n\r\n            }\r\n\r\n        }\r\n\t}\r\n\t\r\n\t// slick grid row selected on click (for multiple rows)\r\n\tfunction row_selected (e, args)\r\n\t{\r\n\t\t\r\n\t\t// get rows selected\r\n\t\tvar rows = grid_view.getSelectedRows();\r\n\r\n\t\t// convert to table ids\r\n        var row_ids = convert_row_ids(rows);\r\n\r\n\t\t// add selections (unless in zoom mode)\r\n\t\tif (selections.sel_type() > 0) {\r\n\t\t\tselections.zero_sel();\r\n\t\t\tselections.update_sel(row_ids[0]);\r\n\t\t}\t\r\n\r\n\t\t// fire selection change event\r\n\t\tvar selectionEvent = new CustomEvent(\"DACSelectionsChanged\", { detail: {\r\n\t\t\t\t\t                         active_sel: []} });\r\n        document.body.dispatchEvent(selectionEvent);\r\n\t\t\r\n\t}\r\n\r\n\t// converts selected row id to table row id (in case table is sorted)\r\n\tfunction convert_row_ids(rows)\r\n\t{\r\n\r\n\t\t// change grid ids to data ids\r\n\t\tvar row_ids = [];\r\n\t\tfor (var i = 0; i < rows.length; i++) {\r\n\t\t\tvar item = data_view.getItem(rows[i]);\r\n\t\t\trow_ids.push(item[item.length-2]);\r\n\t\t}\r\n\r\n\t\treturn row_ids;\r\n\r\n\t}\r\n\r\n\t// slick grid change in rows\r\n\tfunction change_rows (e, args) \r\n\t{\r\n  \t\tgrid_view.updateRowCount();\r\n  \t\tgrid_view.render();\r\n\t}\r\n\t\r\n\t// slick grid change in columns\r\n\tfunction change_cols (e, args) \r\n\t{\r\n  \t\tgrid_view.invalidateRows(args.rows);\r\n  \t\tgrid_view.render();\r\n  \t}\r\n  \t\r\n  \t// override slick grid meta data method to color rows according to selection\r\n  \tfunction color_rows(old_metadata) {\r\n\r\n  \t\treturn function(row) {\r\n  \t\t\tvar item = this.getItem(row);\r\n  \t\t\tvar meta = old_metadata(row) || {};\r\n  \t\t\t\r\n  \t\t\tif (item) {\r\n  \t\t\t\r\n  \t\t\t\t// make sure the \"cssClasses\" property exists\r\n  \t\t\t\tmeta.cssClasses = meta.cssClasses || '';\r\n  \t\t\t\t\r\n  \t\t\t\tvar num_cols = item.length;\r\n  \t\t\t\t\r\n  \t\t\t\t// set css class according to selection\r\n  \t\t\t\tif (item[num_cols-1] == 1) {\r\n  \t\t\t\t\tmeta.cssClasses = 'selection-1';\r\n  \t\t\t\t} else if (item[num_cols-1] == 2) {\r\n  \t\t\t\t\tmeta.cssClasses = 'selection-2';\r\n  \t\t\t\t} else if (item[num_cols-1] == 3) {\r\n  \t\t\t\t    meta.cssClasses = 'focus-selection';\r\n  \t\t\t\t} else if (item[num_cols-1] == 4) {\r\n  \t\t\t\t    meta.cssClasses = 'not-in-subset';\r\n  \t\t\t\t} else {\r\n  \t\t\t\t\tmeta.cssClasses = 'no-selection';\r\n  \t\t\t\t}\r\n  \t\t\t}\r\n  \t\t\t\r\n  \t\t\treturn meta;\r\n  \t\t}\r\n\r\n  \t}\r\n  \t\r\n  \t// slick grid column sort\r\n  \tfunction col_sort (e, args)\r\n  \t{\r\n  \t\tvar comparer = function (a,b) {\r\n  \t\t\treturn (a[args.sortCol.field] > b[args.sortCol.field]) ? 1 : -1;\r\n  \t\t}\r\n  \t\t\r\n  \t\tdata_view.sort(comparer, args.sortAsc);\r\n  \t}\r\n  \t\r\n\t// resize slick grid if container resizes\r\n\tmodule.resize = function()\r\n\t{\r\n\t\t// get size of container\r\n\t\tvar width = $(\"#dac-datapoints-pane\").width();\r\n\t\tvar height = $(\"#dac-datapoints-pane\").height();\r\n\t\t\r\n\t\t// set table size to size of container\r\n\t\t$(\"#dac-datapoints-table\").width(width);\r\n\t\t$(\"#dac-datapoints-table\").height(height);\r\n\t\t\r\n\t\t// re-draw table\r\n\t\tgrid_view.resizeCanvas();\r\n\t\t\r\n\t\t// re-render header\r\n\t\tgrid_view.setColumns(grid_view.getColumns())\r\n\t}\r\n\t\r\n\t// gets called to set selection type\r\n\tmodule.set_sel_type = function(new_sel_type)\r\n\t{\r\n\t\tcurr_sel_type = new_sel_type;\r\n\t}\r\n\t\r\n\t// highlight rows for selections\r\n\tmodule.select_rows = function ()\r\n\t{\r\n\r\n\t\t// update selection indices\r\n\t\tvar new_sel_1 = selections.sel_1();\r\n\t\tvar new_sel_2 = selections.sel_2();\r\n\t\tvar new_focus = selections.focus();\r\n        var subset_mask = selections.get_subset();\r\n\r\n\t\t// generate vector of data view with new selections\r\n\t\tvar sel_vec = [];\r\n\t\tvar num_rows = data_view.getLength();\r\n\t\tfor (var i = 0; i != num_rows; i++) {\r\n\t\t\tsel_vec.push(0);\r\n\t\t}\r\n\r\n\t\t// mark selection 1\r\n\t\tfor (var i = 0; i != new_sel_1.length; i++) {\r\n\t\t\tsel_vec[new_sel_1[i]] = 1;\r\n\t\t}\r\n\r\n\t\t// mark selection 2\r\n\t\tfor (var i = 0; i != new_sel_2.length; i++) {\r\n\t\t\tsel_vec[new_sel_2[i]] = 2;\r\n\t\t}\r\n\r\n\t\t// mark focus, if present\r\n\t\tif (new_focus != null) {\r\n\t\t    sel_vec[new_focus] = 3;\r\n\t\t}\r\n\r\n\t\t// mark if not in subset\r\n\t\tfor (var i = 0; i < subset_mask.length; i++) {\r\n\t\t    if (!subset_mask[i]) {\r\n\t\t        sel_vec[i] = 4;\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\t\t// temporarily turn off table rendering\r\n\t\tdata_view.beginUpdate();\r\n\t\t\r\n\t\t// update last column of table with new selections\r\n\t\t// also get first selected row in grid view (not data view)\r\n\t\tfor (var i = 0; i != num_rows; i++)\r\n\t\t{\r\n\t\t\t// get a row \r\n\t\t\tvar item = data_view.getItemById(i);\r\n\t\t\tvar num_cols = item.length;\r\n\t\t\t\r\n\t\t\t// update selection info\r\n\t\t\titem[num_cols-1] = sel_vec[i];\r\n\t\t\t\r\n\t\t\t// put row back in table\r\n\t\t\tdata_view.updateItem(i, item);\r\n\t\t}\r\n\r\n\t\t// turn table re-draw back on\r\n\t\tdata_view.endUpdate();\r\n\t\t\t\t\r\n\t}\r\n\t\r\n\t// jumps to the first row in the provide selection\r\n\tmodule.jump_to = function (selection)\r\n\t{\t\t\r\n\t\r\n\t\t// if selection is empty, nothing is done\r\n\t\tif (selection.length > 0)\r\n\t\t{\r\n\t\t\tvar num_rows = data_view.getLength();\r\n\t\t\tvar first_sel = num_rows - 1;\r\n\t\t\tfor (var i = 0; i != num_rows; i++)\r\n\t\t\t{\r\n\t\t\t\tif (selection.indexOf(i) > -1) {\r\n\t\t\t\t\tfirst_sel = Math.min(first_sel, data_view.getRowById(i));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// now scroll to first selected row\r\n\t\t\tgrid_view.scrollRowIntoView(first_sel);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\treturn module;\r\n\t\r\n};\r\n\r\nexport default module;\r\n","// This function sets up the jquery layout for the dial-a-cluster function.\n// It uses the variables SLYCAT_HEADER, ALPHA_SLIDER_WIDTH,\n// and ALPHA_BUTTONS_HEIGHT as passed from dac-ui.js.\n\n// S. Martin\n// 1/15/2015\n\nimport scatter_plot from \"./dac-scatter-plot.js\";\nimport plots from \"./dac-plots.js\";\nimport metadata_table from \"./dac-table.js\";\nimport \"js/jquery.layout-latest.min\";\n\nexport default {\n\n    setup: function(ALPHA_SLIDER_WIDTH, ALPHA_BUTTONS_HEIGHT,\n        SCATTER_BUTTONS_HEIGHT, CONTROL_BAR_POSITION)\n    {\n\n        if (CONTROL_BAR_POSITION == \"scatter-plot\")\n        {\n\n            // set up control bar above scatter plot\n\n            // remove top control bar\n            $(\"#dac-control-bar-top\").remove();\n\n            // remove middle mds-pane\n            $(\"#dac-mds-pane-bar-top\").remove();\n\n            // Set up the outer layout (includes center and east)\n            $(\"#dac-model\").layout(\n            {\n                applyDefaultStyles: true,\n                east:\n                {\n                    size: $(window).width() / 3,\n                },\n                onresize: function()\n                {\n                    plots.draw();\n                }\n            });\n\n            // setup inner window layout.\n            $(\"#dac-model > .ui-layout-center\").layout(\n            {\n                applyDefaultStyles: true,\n                south:\n                {\n                    size: $(window).height() / 4,\n                },\n                onresize: function ()\n                {\n                    metadata_table.resize();\n                },\n                west:\n                {\n                    size: ALPHA_SLIDER_WIDTH,\n                },\n            });\n\n            // set up inner window with scatter plot & buttons\n            $(\"#dac-model > .ui-layout-center > .ui-layout-center\").layout(\n            {\n                applyDefaultStyles: true,\n                north:\n                {\n                    size: SCATTER_BUTTONS_HEIGHT,\n                },\n                onresize: function()\n                {\n                    scatter_plot.draw();\n                },\n            });\n\n            // set up the west window layout (with alpha buttons)\n            $(\"#dac-model > .ui-layout-center > .ui-layout-west\").layout(\n            {\n                applyDefaultStyles: true,\n                south:\n                {\n                    size: ALPHA_BUTTONS_HEIGHT,\n                },\n            });\n\n            // when resizing the window, adjust the height of the layout.\n            $(window).resize(function()\n            {\n                $(\"#dac-model\").height($(window).height());\n            });\n\n        } else {\n\n            // set up control bar at very top of UI\n\n            // remove scatter plot control bar\n            $(\"#dac-control-bar-scatter-plot\").remove();\n\n            // rename mds-pane\n            $(\"#dac-mds-pane-bar-top\").attr(\"id\", \"dac-mds-pane\");\n\n            // set up remainder of jquery layout\n            $(\"#dac-model\").layout(\n            {\n                applyDefaultStyles: true,\n                east:\n                {\n                    size: $(window).width() / 3,\n                },\n                onresize: function()\n                {\n                    plots.draw();\n                }\n            });\n\n            // setup inner window layout.\n            $(\"#dac-model > .ui-layout-center\").layout(\n            {\n                applyDefaultStyles: true,\n                north:\n                {\n                    size: SCATTER_BUTTONS_HEIGHT,\n                },\n                south:\n                {\n                    size: $(window).height() / 4,\n                },\n                west:\n                {\n                    size: ALPHA_SLIDER_WIDTH,\n                },\n                onresize: function ()\n                {\n                    scatter_plot.draw();\n                    metadata_table.resize();\n                },\n            });\n\n            // set up the west window layout (with alpha buttons)\n            $(\"#dac-model > .ui-layout-center > .ui-layout-west\").layout(\n            {\n                applyDefaultStyles: true,\n                south:\n                {\n                    size: ALPHA_BUTTONS_HEIGHT,\n                },\n            });\n\n            // when resizing the window, adjust the height of the layout.\n            $(window).resize(function()\n            {\n                $(\"#dac-model\").height($(window).height());\n            });\n\n        }\n    }\n};\n","// This script contains the code for managing the alpha sliders on the left\n// hand side of the user interface for dial-a-cluster.  The setup requires\n// the ALPHA_STEP parameter defined in dac-ui.js.\n\n// S. Martin\n// 1/15/2015\n\nimport $ from \"../../../slycat/node_modules/jquery\";\n\n() =>\n{\n\t\n\t// return functions in module variables\n\tvar module = {};\n\t\n\t// private variables\n\tvar alpha_num = null;\n\tvar alpha_names = null;\n\tvar alpha_values = [];\n\tvar alpha_order = [];\n\n\t// maximum length of a slider name\n\tvar max_slider_name_length = null;\n\n\t// which sliders to display\n\tvar var_include_columns = null;\n\n\tmodule.setup = function (ALPHA_STEP, num_alpha, names_alpha, MAX_SLIDER_NAME, INCLUDE_COLUMNS)\n\t{\n\n\t\t// sort out the information we need\n\t\talpha_num = num_alpha;\n\t\talpha_names = names_alpha;\n\t\tmax_slider_name_length = MAX_SLIDER_NAME;\n\n\t\t// exclude columns, if requested\n        var_include_columns = INCLUDE_COLUMNS;\n\n        // truncate names if they are too long\n        for (var i = 0; i < alpha_num; i ++) {\n            if (alpha_names[i].length > max_slider_name_length) {\n                alpha_names[i] = alpha_names[i].substring(0, max_slider_name_length) + \" ...\";\n            }\n        }\n\n\t\t// initialize alpha slider values to all 1 (unless they are\n\t\t// not included as variables to anlayze) and order to 1 ... n\n\t\tfor (i = 0; i < alpha_num; i++) {\n\n\t\t    if (var_include_columns.indexOf(i) != -1) {\n\n\t\t        // push value of 1\n\t\t        alpha_values.push(1.0);\n                alpha_order.push(i);\n\n\t\t    } else {\n\n\t\t        // push value of 0\n\t\t        alpha_values.push(0.0);\n                alpha_order.push(i);\n\n\t\t    }\n\n        }\n\t\t\t\n\t\t// write out list of sliders to html file\n\t\tdisplay_alpha_sliders.bind($(\"#dac-alpha-sliders\"))(ALPHA_STEP);\n\t\t\t\n\t\t// make sliders sortable\n\t\t$(\"#dac-alpha-sliders\").sortable();\n\n\t}\n\n\t// populate alpha sliders with relevant labels, in order, and with values\n\tfunction display_alpha_sliders(ALPHA_STEP)\n\t{\n\t\tthis.empty();\n\t\t\t\n\t\t// display alpha sliders\n\t\tfor (var i = 0; i != alpha_num; ++i)\n\t\t{\n\t\t\t// write out in alpha_order\n\t\t\tvar j = alpha_order[i];\n\n\t\t\t// generate the slider in the HTML (only if included)\n\t\t\tif (var_include_columns.indexOf(i) != -1) {\n\n\t\t\t    // add to HTML\n                var list_item = $('<li class=\"dac-alpha-slider\">').appendTo(this);\n                var label_item = $('<label for=\"dac-slider-' + j + '\">').appendTo(list_item);\n                var input_item = $('<input type=\"range\" id=\"dac-alpha-slider-' +\n                        j + '\" step=\"' + ALPHA_STEP + '\" min=\"0\" max=\"1\" value=\"' +\n                        alpha_values[j] + '\">').appendTo(list_item);\n                label_item.text(alpha_names[j]);\n\n                // define action if slider is moved\n\t\t\t    input_item.change(function ()\n\t\t\t\t{\n\t\t\t\t\t// determine slider id and new value\n\t\t\t\t\tvar slider_id_str = this.id;\n\t\t\t\t\tvar slider_id = Number(slider_id_str.split(\"-\").pop());\n\t\t\t\t\tvar slider_value = Number(this.value);\n\n\t\t\t\t\t// set new value in alpha variables\n\t\t\t\t\talpha_values[slider_id] = slider_value;\n\n\t\t\t\t\t// fire alpha value change event\n\t\t\t\t\tvar alphaEvent = new CustomEvent(\"DACAlphaValuesChanged\",\n\t\t\t\t\t    { detail: alpha_values });\n                    document.body.dispatchEvent(alphaEvent);\n\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\t\n\t// zero out all the sliders, and re-plot MDS coords\n\tmodule.set_alpha_values = function (new_alpha_values)\n\t{\n\t\t// copy new values and reset sliders\n\t\tfor (var i = 0; i != alpha_num; ++i) {\n\t\t\talpha_values[i] = new_alpha_values[i];\n\n\t\t\t// set slider value\n\t\t\tif (var_include_columns.indexOf(i) != -1) {\n\t\t\t    $(\"#dac-alpha-slider-\" + i).val(alpha_values[i]);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// get alpha values\n\tmodule.get_alpha_values = function ()\n\t{\n\t    return alpha_values;\n\t}\n\n\treturn module;\n\t\n};\n\nexport default module;","// This script contains the code for managing the alpha buttons on the left\n// hand side of the user interface for dial-a-cluster.  The .setup() function\n// should be called first to initialize the private variables.\n//\n// S. Martin\n// 2/12/2015\n\nimport dialog from \"../../../slycat/web-server/js/slycat-dialog.js\";\nimport $ from \"../../../slycat/node_modules/jquery\";\nimport request from \"./dac-request-data.js\";\n\n() =>\n{\n\t// return functions in module variables\n\tvar module = {};\n\t\n\t// private variables\n\tvar alpha_num = null;\n\tvar alpha_clusters = null;\n\n\t// which columns to include\n\tvar var_include_columns = null;\n\n\t// zero out all alpha sliders\n\tvar zero_button_callback = function ()\n\t{\n\n\t\t// create zero array\n\t\tvar zero_array = new Array(alpha_num);\n\t\tfor (var i = 0; i != alpha_num; ++i) {\n\t\t\tzero_array[i] = 0.0;\n\t\t}\n\n\t    // fire alpha value change event\n\t\tvar alphaEvent = new CustomEvent(\"DACAlphaValuesChanged\",\n\t\t\t{ detail: zero_array });\n        document.body.dispatchEvent(alphaEvent);\n\n\t}\n\t\n\t// put all alpha sliders to one\n\tvar ones_button_callback = function ()\n\t{\n\t\t// create array of ones (use zeros for non-included columns)\n\t\tvar ones_array = new Array(alpha_num);\n\t\tfor (var i = 0; i != alpha_num; ++i) {\n\n\t\t    if (var_include_columns.indexOf(i) != -1) {\n\t\t        ones_array[i] = 1.0;\n\t\t    } else {\n\t\t        ones_array[i] = 0.0;\n\t\t    }\n\n\t\t}\n\t\t\t\t\n\t    // fire alpha value change event\n\t\tvar alphaEvent = new CustomEvent(\"DACAlphaValuesChanged\",\n\t\t\t{ detail: ones_array });\n        document.body.dispatchEvent(alphaEvent);\n\t}\n\t\n\t// cluster button modifies alpha values according to selections\n\tvar cluster_button_callback = function ()\n\t{\n\t\t// get current color by column\n\t\tvar color_by_col = $(\"#dac-scatter-select\").val();\n\n\t\t// make sure it is not empty\n\t\tif (color_by_col == -1)\n\t\t{\n\t\t\tdialog.ajax_error('Please select a color (from the \"Do Not Color\" pulldown) for clustering.')\n\t\t\t    (\"\",\"\",\"\");\n\t\t\treturn;\n\t\t}\n\n\t    // fire alpha value change event with pre-computed alpha values for selected column\n\t\tvar alphaEvent = new CustomEvent(\"DACAlphaValuesChanged\",\n\t\t\t{ detail: alpha_clusters[color_by_col] });\n        document.body.dispatchEvent(alphaEvent);\n\n\t}\n\t\n\tmodule.setup = function (num_sliders, INCLUDE_COLUMNS)\n\t{\n\n\t\t// determine number of alpha sliders\n        alpha_num = num_sliders;\n\n\t\t// which columns to use\n\t\tvar_include_columns = INCLUDE_COLUMNS;\n\n\t\t// load up cluster alpha values\n\t\t$.when (request.get_array(\"dac-alpha-clusters\", 0)).then(\n\t\t\tfunction (alpha_cluster_data)\n\t\t\t{\t\n\t\t\t\t// input data into model\n\t\t\t\talpha_clusters = alpha_cluster_data;\n\t\t\t},\n\t\t\tfunction ()\n\t\t\t{\n\t\t\t    dialog.ajax_error(\"Server failure: could not alpha cluster values.\")(\"\",\"\",\"\");\n\t\t\t}\n\t\t);\n\t\t\n\t\t// set up callback for zero all alpha button\n\t\tvar zero_button = document.querySelector(\"#dac-alpha-zero-button\");\n\t\tzero_button.addEventListener(\"click\", zero_button_callback);\n\t\t\n\t\t// set up callback for all ones alpha button\n\t\tvar ones_button = document.querySelector(\"#dac-alpha-one-button\");\n\t\tones_button.addEventListener(\"click\", ones_button_callback);\n\t\t\n\t\t// set up callback for cluster button\n\t\tvar cluster_button = document.querySelector(\"#dac-alpha-cluster-button\");\n\t\tcluster_button.addEventListener(\"click\", cluster_button_callback);\n\t\t\n\t}\n\t\n\treturn module;\n\t\n};\n\nexport default module;"],"sourceRoot":""}