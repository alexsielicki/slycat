(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["slycat_page~slycat_project~slycat_projects~ui_cca~ui_parameter_image~ui_parameter_plus~ui_run_comman~247387c4"],{

/***/ "./web-server/js/slycat-server-root.js":
/*!*********************************************!*\
  !*** ./web-server/js/slycat-server-root.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/* Copyright (c) 2013, 2018 National Technology and Engineering Solutions of Sandia, LLC . Under the terms of Contract\n DE-NA0003525 with National Technology and Engineering Solutions of Sandia, LLC, the U.S. Government\n retains certain rights in this software. */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  return $(\"#slycat-server-root\").attr(\"href\");\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWItc2VydmVyL2pzL3NseWNhdC1zZXJ2ZXItcm9vdC5qcz9iMDI0Il0sIm5hbWVzIjpbIiQiLCJhdHRyIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBSUEsaUNBQTZCLEVBQTdCLG1DQUFpQyxZQUNqQztBQUNFLFNBQU9BLEVBQUUscUJBQUYsRUFBeUJDLElBQXpCLENBQThCLE1BQTlCLENBQVA7QUFDRCxDQUhEO0FBQUEscUciLCJmaWxlIjoiLi93ZWItc2VydmVyL2pzL3NseWNhdC1zZXJ2ZXItcm9vdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMywgMjAxOCBOYXRpb25hbCBUZWNobm9sb2d5IGFuZCBFbmdpbmVlcmluZyBTb2x1dGlvbnMgb2YgU2FuZGlhLCBMTEMgLiBVbmRlciB0aGUgdGVybXMgb2YgQ29udHJhY3RcbiBERS1OQTAwMDM1MjUgd2l0aCBOYXRpb25hbCBUZWNobm9sb2d5IGFuZCBFbmdpbmVlcmluZyBTb2x1dGlvbnMgb2YgU2FuZGlhLCBMTEMsIHRoZSBVLlMuIEdvdmVybm1lbnRcbiByZXRhaW5zIGNlcnRhaW4gcmlnaHRzIGluIHRoaXMgc29mdHdhcmUuICovXG5cbmRlZmluZShcInNseWNhdC1zZXJ2ZXItcm9vdFwiLCBbXSwgZnVuY3Rpb24oKVxue1xuICByZXR1cm4gJChcIiNzbHljYXQtc2VydmVyLXJvb3RcIikuYXR0cihcImhyZWZcIik7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./web-server/js/slycat-server-root.js\n");

/***/ }),

/***/ "./web-server/js/slycat-web-client-webpack.js":
/*!****************************************************!*\
  !*** ./web-server/js/slycat-web-client-webpack.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/* Copyright (c) 2013, 2018 National Technology and Engineering Solutions of Sandia, LLC . Under the terms of Contract\n DE-NA0003525 with National Technology and Engineering Solutions of Sandia, LLC, the U.S. Government\n retains certain rights in this software. */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./slycat-server-root */ \"./web-server/js/slycat-server-root.js\"), __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"), __webpack_require__(/*! urijs */ \"./node_modules/urijs/src/URI.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (server_root, $, URI) {\n  var module = {};\n\n  /**\n   * delete a model for a Slycat project\n   * @param params: object{\n   * mid: model id that is to be deleted from the Slycat project\n   * success(): function called upon success\n   * error(request, status, reason_phrase): function called upon error\n   * }\n   */\n  module.delete_model = function (params) {\n    $.ajax({\n      type: \"DELETE\",\n      url: server_root + \"models/\" + params.mid,\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  /**\n   * delete a project in Slycat\n   * @param params: object{\n   * pid: project id of project that is to be deleted from the Slycat\n   * success(): function called upon success\n   * error(request, status, reason_phrase): function called upon error\n   * }\n   */\n  module.delete_project = function (params) {\n    $.ajax({\n      type: \"DELETE\",\n      url: server_root + \"projects/\" + params.pid,\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  /**\n   * delete a reference in Slycat\n   * @param params: object{\n   * rid: reference id of reference that is to be deleted from Slycat\n   * success(): function called upon success\n   * error(request, status, reason_phrase): function called upon error\n   * }\n   */\n  module.delete_reference = function (params) {\n    $.ajax({\n      type: \"DELETE\",\n      url: server_root + \"references/\" + params.rid,\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  /**\n   * delete a remote ssh session from the Slycat server\n   * @param params: object{\n   * sid: session id of open session that is to be deleted from Slycat\n   * success(): function called upon success\n   * error(request, status, reason_phrase): function called upon error\n   * }\n   */\n  module.delete_remote = function (params) {\n    $.ajax({\n      type: \"DELETE\",\n      url: server_root + \"remotes/\" + params.sid,\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  /**\n   * delete a temp upload file from the slycat server\n   * generally you would call this if there was an error in the upload or\n   * if the file was successfully uploaded for cleanup purposes. note that\n   * Uploads are considered temporary and only should be used as a mean to\n   * transport files to the server\n   * @param params: object{\n   * uid: upload id of the partial or fully uploaded file to be deleted from Slycat\n   * success(): function called upon success\n   * error(request, status, reason_phrase): function called upon error\n   * }\n   */\n  module.delete_upload = function (params) {\n    $.ajax({\n      type: \"DELETE\",\n      url: server_root + \"uploads/\" + params.uid,\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  /**\n   *\n   * @param params: object{\n   * success(result): function called upon success\n   * error(request, status, reason_phrase): function called upon error\n   * }\n   */\n  module.get_configuration_markings = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: server_root + \"configuration/markings\",\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_configuration_parsers = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: server_root + \"configuration/parsers\",\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_configuration_support_email = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: server_root + \"configuration/support-email\",\n      success: function success(email) {\n        if (params.success) params.success(email);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_configuration_remote_hosts = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: server_root + \"configuration/remote-hosts\",\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_configuration_version = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: server_root + \"configuration/version\",\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_configuration_wizards = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: server_root + \"configuration/wizards\",\n      success: function success(wizards) {\n        if (params.success) params.success(wizards);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_configuration_agent_functions = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: server_root + \"configuration/agent-functions\",\n      success: function success(fns) {\n        if (params.success) params.success(fns);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_model = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: server_root + \"models/\" + params.mid,\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_model_file = function (params) {\n    $.ajax({\n      type: 'GET',\n      url: server_root + 'models/' + params.mid + '/files/' + params.aid,\n      success: function success(content) {\n        if (params.success) params.success(content);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_model_arrayset_metadata = function (params) {\n    var search = {};\n    if (params.arrays) search.arrays = params.arrays;\n    if (params.statistics) search.statistics = params.statistics;\n    if (params.unique) search.unique = params.unique;\n\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: URI(server_root + \"models/\" + params.mid + \"/arraysets/\" + params.aid + \"/metadata\").search(search).toString(),\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_model_arrayset_data = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: URI(server_root + \"models/\" + params.mid + \"/arraysets/\" + params.aid + \"/data\").search({ \"hyperchunks\": params.hyperchunks }).toString(),\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_model_command = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: URI(server_root + \"models/\" + params.mid + \"/commands/\" + params.type + \"/\" + params.command).search(params.parameters || {}).toString(),\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_model_command = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"POST\",\n      url: URI(server_root + \"models/\" + params.mid + \"/commands/\" + params.type + \"/\" + params.command).search(params.parameters || {}).toString(),\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_sensitive_model_command = function (params) {\n    $.ajax({\n      contentType: \"application/json\",\n      type: \"POST\",\n      url: server_root + \"models/\" + params.mid + \"/sensitive/\" + params.type + \"/\" + params.command,\n      data: JSON.stringify(params.parameters || {}),\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.put_model_command = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"PUT\",\n      url: URI(server_root + \"models/\" + params.mid + \"/commands/\" + params.type + \"/\" + params.command).search(params.parameters || {}).toString(),\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_model_parameter = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: server_root + \"models/\" + params.mid + \"/parameters/\" + params.aid,\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_model_table_metadata = function (params) {\n    console.log(\"slycat-web-client.get_model_table_metadata() is deprecated, use get_model_arrayset_metadata() instead.\");\n\n    var url = server_root + \"models/\" + params.mid + \"/tables/\" + params.aid + \"/arrays/\" + (params.array || \"0\") + \"/metadata\";\n    if (params.index) url += \"?index=\" + params.index;\n\n    //    //other section\n    //    var new_url = server_root + \"models/\" + params.mid + \"/arraysets/\" + params.aid +  \"/metadata?arrays=\" + (params.array || \"0\") + \"%3b1&\" +\"statistics=0\";\n    ////    if(params.index)\n    ////      new_url += \"?index=\" + params.index;\n    //    $.ajax(\n    //    {\n    //      dataType: \"json\",\n    //      type: \"GET\",\n    //      url: new_url,\n    //      success: function(result)\n    //      {\n    //        if(params.success)\n    //          console.log(\"\\nNEW:  \" + new_url + \"\\n\" + JSON.stringify(result) +\"\\n\");\n    //          //params.success(result);\n    //      },\n    //      error: function(request, status, reason_phrase)\n    //      {\n    //        if(params.error)\n    //          console.log(\"\\nNEW:  \" + url + \"\\n\" + request + reason_phrase + status +\"\\n\");\n    //          //params.error(request, status, reason_phrase);\n    //      },\n    //    });\n    //    //END other section\n\n\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: url,\n      success: function success(result) {\n        if (params.success)\n          //console.log(\"\\nOLD:  \" + url + \"\\n\" + JSON.stringify(result) +\"\\n\");\n          params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_project_references = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: server_root + \"projects/\" + params.pid + \"/references\",\n      success: function success(references) {\n        if (params.success) params.success(references);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_remotes = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: server_root + \"remotes/\" + params.hostname,\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_remote_video_status = function (params) {\n    $.ajax({\n      dataType: \"json\",\n      type: \"GET\",\n      url: server_root + \"remotes/\" + params.sid + \"/videos/\" + params.vsid + \"/status\",\n      success: function success(metadata) {\n        if (params.success) params.success(metadata);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_user = function (params) {\n    $.ajax({\n      type: \"GET\",\n      url: server_root + \"users/\" + (params.uid || \"-\"),\n      success: function success(user) {\n        if (params.success) params.success(user);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_event = function (params) {\n    $.ajax({\n      type: \"POST\",\n      url: server_root + \"events/\" + params.path,\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_model_files = function (params) {\n    var data = new FormData();\n    data.append(\"input\", params.input ? true : false);\n    data.append(\"parser\", params.parser);\n    data.append(\"aids\", params.aids);\n    if (params.sids && params.paths) {\n      data.append(\"sids\", params.sids);\n      data.append(\"paths\", params.paths);\n    } else if (params.files) {\n      for (var i = 0; i != params.files.length; ++i) {\n        data.append(\"files\", params.files[i]);\n      }\n    }\n\n    $.ajax({\n      contentType: false,\n      processData: false,\n      data: data,\n      type: \"POST\",\n      url: server_root + \"models/\" + params.mid + \"/files\",\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_model_finish = function (params) {\n    $.ajax({\n      type: \"POST\",\n      url: server_root + \"models/\" + params.mid + \"/finish\",\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_projects = function (params) {\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify({\n        \"name\": params.name,\n        \"description\": params.description || \"\"\n      }),\n      type: \"POST\",\n      url: server_root + \"projects\",\n      success: function success(result) {\n        if (params.success) params.success(result.id);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_project_models = function (params) {\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify({\n        \"model-type\": params.type,\n        \"name\": params.name,\n        \"description\": params.description || \"\",\n        \"marking\": params.marking || \"\"\n      }),\n      type: \"POST\",\n      url: server_root + \"projects/\" + params.pid + \"/models\",\n      success: function success(result) {\n        if (params.success) params.success(result.id);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_project_references = function (params) {\n    var data = {};\n    data.name = params.name;\n    if (\"model-type\" in params) data[\"model-type\"] = params[\"model-type\"];\n    if (\"mid\" in params) data.mid = params.mid;\n    if (\"bid\" in params) data.bid = params.bid;\n\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify(data),\n      type: \"POST\",\n      url: server_root + \"projects/\" + params.pid + \"/references\",\n      success: function success(result) {\n        if (params.success) params.success(result.id);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  /**\n   * put a reference in Slycat\n   * @param params: object{\n   * rid: reference id of reference that is to be updated\n   * success(): function called upon success\n   * error(request, status, reason_phrase): function called upon error\n   * }\n   */\n  module.put_reference = function (params) {\n    var data = {};\n    if (\"name\" in params) data[\"name\"] = params[\"name\"];\n    if (\"bid\" in params) data[\"bid\"] = params[\"bid\"];\n\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify(data),\n      type: \"PUT\",\n      url: server_root + \"references/\" + params.rid,\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_remotes = function (params) {\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify({\n        hostname: params.hostname,\n        username: params.username,\n        password: params.password,\n        agent: params.agent !== undefined ? params.agent : null\n      }),\n      type: \"POST\",\n      url: server_root + \"remotes\",\n      success: function success(result) {\n        if (params.success) params.success(result.sid);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_session_status = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      type: 'GET',\n      url: server_root + 'remotes/' + params.hostname + '/session-status',\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_remote_launch = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      data: JSON.stringify({\n        command: params.command\n      }),\n      type: 'POST',\n      url: server_root + 'remotes/' + params.hostname + '/launch',\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_submit_batch = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      data: JSON.stringify({\n        filename: params.filename\n      }),\n      type: 'POST',\n      url: server_root + 'remotes/' + params.hostname + 'submit-batch',\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_checkjob = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      type: 'GET',\n      url: server_root + 'remotes/checkjob/' + params.hostname + \"/\" + params.jid,\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.delete_job = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      type: 'DELETE',\n      url: server_root + 'remotes/delete-job/' + params.hostname + '/' + params.jid,\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_job_output = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      type: 'GET',\n      url: server_root + 'remotes/get-job-output/' + params.hostname + \"/\" + params.jid + \"/path\" + params.path,\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_user_config = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      type: 'GET',\n      url: server_root + 'remotes/' + params.hostname + '/get-user-config',\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.set_user_config = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      data: JSON.stringify({\n        config: params.config\n      }),\n      type: 'POST',\n      url: server_root + 'remotes/' + params.hostname + '/set-user-config',\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_agent_function = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      data: JSON.stringify({\n        wckey: params.wckey,\n        nnodes: params.nnodes,\n        partition: params.partition,\n        ntasks_per_node: params.ntasks_per_node,\n        ntasks: params.ntasks,\n        ncpu_per_task: params.ncpu_per_task,\n        time_hours: params.time_hours,\n        time_minutes: params.time_minutes,\n        time_seconds: params.time_seconds,\n        fn: params.fn,\n        fn_params: params.fn_params,\n        uid: params.uid\n      }),\n      type: 'POST',\n      url: server_root + 'remotes/' + params.hostname + '/run-agent-function',\n      success: function success(response) {\n        if (params.success) params.success(response);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_remote_browse = function (params) {\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify({}),\n      type: \"POST\",\n      url: server_root + \"remotes/\" + params.hostname + \"/browse\" + params.path,\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_uploads = function (params) {\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify({\n        \"mid\": params.mid,\n        \"input\": params.input,\n        \"parser\": params.parser,\n        \"aids\": params.aids\n      }),\n      type: \"POST\",\n      url: server_root + \"uploads\",\n      success: function success(result) {\n        if (params.success) params.success(result.id);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_log = function (params) {\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify({\n        \"message\": params.message\n      }),\n      type: \"POST\",\n      url: server_root + \"log\",\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.post_upload_finished = function (params) {\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify({\n        \"uploaded\": params.uploaded\n      }),\n      type: \"POST\",\n      url: server_root + \"uploads/\" + params.uid + \"/finished\",\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.put_model_inputs = function (params) {\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify({\n        sid: params.sid,\n        \"deep-copy\": params[\"deep-copy\"] || false\n      }),\n      type: \"PUT\",\n      url: server_root + \"models/\" + params.mid + \"/inputs\",\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.put_model_parameter = function (params) {\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify({\n        value: params.value,\n        input: params.input === undefined ? true : params.input ? true : false\n      }),\n      type: \"PUT\",\n      url: server_root + \"models/\" + params.mid + \"/parameters/\" + params.aid,\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.put_project = function (params) {\n    var project = {};\n    if (\"name\" in params) project.name = params.name;\n    if (\"description\" in params) project.description = params.description;\n    if (\"acl\" in params) project.acl = params.acl;\n\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify(project),\n      processData: false,\n      type: \"PUT\",\n      url: server_root + \"projects/\" + params.pid,\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.delete_project_cache = function (params) {\n    $.ajax({\n      type: \"DELETE\",\n      url: server_root + \"projects/\" + params.pid + \"/delete-cache\",\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  /**\n   * delete model artifacts from the nosql database\n   * @param params\n   * {\n   *  mid:model_id,\n   *  aid:artifact_id,\n   *  success:func(called on ajax success),\n   *  error:func(called on ajax error)\n   * }\n   */\n  module.delete_model_parameter = function (params) {\n    $.ajax({\n      type: \"DELETE\",\n      url: server_root + \"delete-artifact/\" + params.mid + \"/\" + params.aid,\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.put_model = function (params) {\n    var model = {};\n    if (\"name\" in params) model.name = params.name;\n    if (\"description\" in params) model.description = params.description;\n    if (\"marking\" in params) model.marking = params.marking;\n    if (\"state\" in params) model.state = params.state;\n\n    $.ajax({\n      contentType: \"application/json\",\n      data: JSON.stringify(model),\n      processData: false,\n      type: \"PUT\",\n      url: server_root + \"models/\" + params.mid,\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.put_upload_file_part = function (params) {\n\n    var data = new FormData();\n    if (params.hostname && params.path) {\n      //      console.log(\"if? sid \"+params.sid+\"path \"+params.path+\"file \"+params.file);\n      data.append(\"hostname\", params.hostname);\n      data.append(\"path\", params.path);\n    } else if (params.file) {\n      //      console.log(\"if else? sid \"+params.sid+\"path \"+params.path+\"file \"+params.file);\n      data.append(\"file\", params.file);\n    }\n\n    $.ajax({\n      contentType: false,\n      processData: false,\n      data: data,\n      type: \"PUT\",\n      url: server_root + \"uploads/\" + params.uid + \"/files/\" + params.fid + \"/parts/\" + params.pid,\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.sign_out = function (params) {\n    $.ajax({\n      type: \"DELETE\",\n      url: server_root + \"logout\",\n      success: function success() {\n        if (params.success) params.success();\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.job_time = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      type: 'GET',\n      url: server_root + 'remotes/' + params.nodes + \"/\" + params.tasks + \"/\" + params.size + \"/job-time\",\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_time_series_names = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      type: 'GET',\n      url: server_root + \"remotes/\" + params.hostname + \"/time_series_names/file\" + params.path,\n      success: function success(result) {\n        //console.log(\"result \"+JSON.stringify(result))\n        if (params.success) return params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_project = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      type: 'GET',\n      url: server_root + 'projects/' + params.pid,\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_projects = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      type: 'GET',\n      url: server_root + 'projects_list',\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n\n  module.get_project_models = function (params) {\n    $.ajax({\n      contentType: 'application/json',\n      type: 'GET',\n      url: server_root + 'projects/' + params.pid + '/models',\n      success: function success(result) {\n        if (params.success) params.success(result);\n      },\n      error: function error(request, status, reason_phrase) {\n        if (params.error) params.error(request, status, reason_phrase);\n      }\n    });\n  };\n  return module;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWItc2VydmVyL2pzL3NseWNhdC13ZWItY2xpZW50LXdlYnBhY2suanM/ZmFhNCJdLCJuYW1lcyI6WyJzZXJ2ZXJfcm9vdCIsIiQiLCJVUkkiLCJtb2R1bGUiLCJkZWxldGVfbW9kZWwiLCJwYXJhbXMiLCJhamF4IiwidHlwZSIsInVybCIsIm1pZCIsInN1Y2Nlc3MiLCJlcnJvciIsInJlcXVlc3QiLCJzdGF0dXMiLCJyZWFzb25fcGhyYXNlIiwiZGVsZXRlX3Byb2plY3QiLCJwaWQiLCJkZWxldGVfcmVmZXJlbmNlIiwicmlkIiwiZGVsZXRlX3JlbW90ZSIsInNpZCIsImRlbGV0ZV91cGxvYWQiLCJ1aWQiLCJnZXRfY29uZmlndXJhdGlvbl9tYXJraW5ncyIsImRhdGFUeXBlIiwicmVzdWx0IiwiZ2V0X2NvbmZpZ3VyYXRpb25fcGFyc2VycyIsImdldF9jb25maWd1cmF0aW9uX3N1cHBvcnRfZW1haWwiLCJlbWFpbCIsImdldF9jb25maWd1cmF0aW9uX3JlbW90ZV9ob3N0cyIsImdldF9jb25maWd1cmF0aW9uX3ZlcnNpb24iLCJnZXRfY29uZmlndXJhdGlvbl93aXphcmRzIiwid2l6YXJkcyIsImdldF9jb25maWd1cmF0aW9uX2FnZW50X2Z1bmN0aW9ucyIsImZucyIsImdldF9tb2RlbCIsImdldF9tb2RlbF9maWxlIiwiYWlkIiwiY29udGVudCIsImdldF9tb2RlbF9hcnJheXNldF9tZXRhZGF0YSIsInNlYXJjaCIsImFycmF5cyIsInN0YXRpc3RpY3MiLCJ1bmlxdWUiLCJ0b1N0cmluZyIsImdldF9tb2RlbF9hcnJheXNldF9kYXRhIiwiaHlwZXJjaHVua3MiLCJnZXRfbW9kZWxfY29tbWFuZCIsImNvbW1hbmQiLCJwYXJhbWV0ZXJzIiwicG9zdF9tb2RlbF9jb21tYW5kIiwicG9zdF9zZW5zaXRpdmVfbW9kZWxfY29tbWFuZCIsImNvbnRlbnRUeXBlIiwiZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwdXRfbW9kZWxfY29tbWFuZCIsImdldF9tb2RlbF9wYXJhbWV0ZXIiLCJnZXRfbW9kZWxfdGFibGVfbWV0YWRhdGEiLCJjb25zb2xlIiwibG9nIiwiYXJyYXkiLCJpbmRleCIsImdldF9wcm9qZWN0X3JlZmVyZW5jZXMiLCJyZWZlcmVuY2VzIiwiZ2V0X3JlbW90ZXMiLCJob3N0bmFtZSIsImdldF9yZW1vdGVfdmlkZW9fc3RhdHVzIiwidnNpZCIsIm1ldGFkYXRhIiwiZ2V0X3VzZXIiLCJ1c2VyIiwicG9zdF9ldmVudCIsInBhdGgiLCJwb3N0X21vZGVsX2ZpbGVzIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJpbnB1dCIsInBhcnNlciIsImFpZHMiLCJzaWRzIiwicGF0aHMiLCJmaWxlcyIsImkiLCJsZW5ndGgiLCJwcm9jZXNzRGF0YSIsInBvc3RfbW9kZWxfZmluaXNoIiwicG9zdF9wcm9qZWN0cyIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImlkIiwicG9zdF9wcm9qZWN0X21vZGVscyIsIm1hcmtpbmciLCJwb3N0X3Byb2plY3RfcmVmZXJlbmNlcyIsImJpZCIsInB1dF9yZWZlcmVuY2UiLCJwb3N0X3JlbW90ZXMiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiYWdlbnQiLCJ1bmRlZmluZWQiLCJnZXRfc2Vzc2lvbl9zdGF0dXMiLCJwb3N0X3JlbW90ZV9sYXVuY2giLCJwb3N0X3N1Ym1pdF9iYXRjaCIsImZpbGVuYW1lIiwiZ2V0X2NoZWNram9iIiwiamlkIiwiZGVsZXRlX2pvYiIsImdldF9qb2Jfb3V0cHV0IiwiZ2V0X3VzZXJfY29uZmlnIiwic2V0X3VzZXJfY29uZmlnIiwiY29uZmlnIiwicG9zdF9hZ2VudF9mdW5jdGlvbiIsIndja2V5Iiwibm5vZGVzIiwicGFydGl0aW9uIiwibnRhc2tzX3Blcl9ub2RlIiwibnRhc2tzIiwibmNwdV9wZXJfdGFzayIsInRpbWVfaG91cnMiLCJ0aW1lX21pbnV0ZXMiLCJ0aW1lX3NlY29uZHMiLCJmbiIsImZuX3BhcmFtcyIsInJlc3BvbnNlIiwicG9zdF9yZW1vdGVfYnJvd3NlIiwicG9zdF91cGxvYWRzIiwicG9zdF9sb2ciLCJtZXNzYWdlIiwicG9zdF91cGxvYWRfZmluaXNoZWQiLCJ1cGxvYWRlZCIsInB1dF9tb2RlbF9pbnB1dHMiLCJwdXRfbW9kZWxfcGFyYW1ldGVyIiwidmFsdWUiLCJwdXRfcHJvamVjdCIsInByb2plY3QiLCJhY2wiLCJkZWxldGVfcHJvamVjdF9jYWNoZSIsImRlbGV0ZV9tb2RlbF9wYXJhbWV0ZXIiLCJwdXRfbW9kZWwiLCJtb2RlbCIsInN0YXRlIiwicHV0X3VwbG9hZF9maWxlX3BhcnQiLCJmaWxlIiwiZmlkIiwic2lnbl9vdXQiLCJqb2JfdGltZSIsIm5vZGVzIiwidGFza3MiLCJzaXplIiwiZ2V0X3RpbWVfc2VyaWVzX25hbWVzIiwiZ2V0X3Byb2plY3QiLCJnZXRfcHJvamVjdHMiLCJnZXRfcHJvamVjdF9tb2RlbHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFJQSxpQ0FDRSxDQUNFLHdGQURGLEVBRUUseUVBRkYsRUFHRSxtRUFIRixDQURGLG1DQUtLLFVBQVNBLFdBQVQsRUFBc0JDLENBQXRCLEVBQXlCQyxHQUF6QixFQUNMO0FBQ0UsTUFBSUMsU0FBUyxFQUFiOztBQUVBOzs7Ozs7OztBQVFBQSxTQUFPQyxZQUFQLEdBQXNCLFVBQVNDLE1BQVQsRUFDdEI7QUFDRUosTUFBRUssSUFBRixDQUNBO0FBQ0VDLFlBQU0sUUFEUjtBQUVFQyxXQUFLUixjQUFjLFNBQWQsR0FBMEJLLE9BQU9JLEdBRnhDO0FBR0VDLGVBQVMsbUJBQ1Q7QUFDRSxZQUFHTCxPQUFPSyxPQUFWLEVBQ0VMLE9BQU9LLE9BQVA7QUFDSCxPQVBIO0FBUUVDLGFBQU8sZUFBU0MsT0FBVCxFQUFrQkMsTUFBbEIsRUFBMEJDLGFBQTFCLEVBQ1A7QUFDRSxZQUFHVCxPQUFPTSxLQUFWLEVBQ0VOLE9BQU9NLEtBQVAsQ0FBYUMsT0FBYixFQUFzQkMsTUFBdEIsRUFBOEJDLGFBQTlCO0FBQ0g7QUFaSCxLQURBO0FBZUQsR0FqQkQ7O0FBbUJBOzs7Ozs7OztBQVFBWCxTQUFPWSxj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bnQtd2VicGFjay5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMywgMjAxOCBOYXRpb25hbCBUZWNobm9sb2d5IGFuZCBFbmdpbmVlcmluZyBTb2x1dGlvbnMgb2YgU2FuZGlhLCBMTEMgLiBVbmRlciB0aGUgdGVybXMgb2YgQ29udHJhY3RcbiBERS1OQTAwMDM1MjUgd2l0aCBOYXRpb25hbCBUZWNobm9sb2d5IGFuZCBFbmdpbmVlcmluZyBTb2x1dGlvbnMgb2YgU2FuZGlhLCBMTEMsIHRoZSBVLlMuIEdvdmVybm1lbnRcbiByZXRhaW5zIGNlcnRhaW4gcmlnaHRzIGluIHRoaXMgc29mdHdhcmUuICovXG5cbmRlZmluZShcInNseWNhdC13ZWItY2xpZW50XCIsIFxuICBbXG4gICAgXCIuL3NseWNhdC1zZXJ2ZXItcm9vdFwiLCBcbiAgICBcImpxdWVyeVwiLCBcbiAgICBcInVyaWpzXCJcbiAgXSwgZnVuY3Rpb24oc2VydmVyX3Jvb3QsICQsIFVSSSlcbntcbiAgdmFyIG1vZHVsZSA9IHt9O1xuXG4gIC8qKlxuICAgKiBkZWxldGUgYSBtb2RlbCBmb3IgYSBTbHljYXQgcHJvamVjdFxuICAgKiBAcGFyYW0gcGFyYW1zOiBvYmplY3R7XG4gICAqIG1pZDogbW9kZWwgaWQgdGhhdCBpcyB0byBiZSBkZWxldGVkIGZyb20gdGhlIFNseWNhdCBwcm9qZWN0XG4gICAqIHN1Y2Nlc3MoKTogZnVuY3Rpb24gY2FsbGVkIHVwb24gc3VjY2Vzc1xuICAgKiBlcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpOiBmdW5jdGlvbiBjYWxsZWQgdXBvbiBlcnJvclxuICAgKiB9XG4gICAqL1xuICBtb2R1bGUuZGVsZXRlX21vZGVsID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIHR5cGU6IFwiREVMRVRFXCIsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgXCJtb2RlbHMvXCIgKyBwYXJhbXMubWlkLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24oKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcygpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogZGVsZXRlIGEgcHJvamVjdCBpbiBTbHljYXRcbiAgICogQHBhcmFtIHBhcmFtczogb2JqZWN0e1xuICAgKiBwaWQ6IHByb2plY3QgaWQgb2YgcHJvamVjdCB0aGF0IGlzIHRvIGJlIGRlbGV0ZWQgZnJvbSB0aGUgU2x5Y2F0XG4gICAqIHN1Y2Nlc3MoKTogZnVuY3Rpb24gY2FsbGVkIHVwb24gc3VjY2Vzc1xuICAgKiBlcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpOiBmdW5jdGlvbiBjYWxsZWQgdXBvbiBlcnJvclxuICAgKiB9XG4gICAqL1xuICBtb2R1bGUuZGVsZXRlX3Byb2plY3QgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgdHlwZTogXCJERUxFVEVcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcInByb2plY3RzL1wiICsgcGFyYW1zLnBpZCxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MoKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIGRlbGV0ZSBhIHJlZmVyZW5jZSBpbiBTbHljYXRcbiAgICogQHBhcmFtIHBhcmFtczogb2JqZWN0e1xuICAgKiByaWQ6IHJlZmVyZW5jZSBpZCBvZiByZWZlcmVuY2UgdGhhdCBpcyB0byBiZSBkZWxldGVkIGZyb20gU2x5Y2F0XG4gICAqIHN1Y2Nlc3MoKTogZnVuY3Rpb24gY2FsbGVkIHVwb24gc3VjY2Vzc1xuICAgKiBlcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpOiBmdW5jdGlvbiBjYWxsZWQgdXBvbiBlcnJvclxuICAgKiB9XG4gICAqL1xuICBtb2R1bGUuZGVsZXRlX3JlZmVyZW5jZSA9IGZ1bmN0aW9uKHBhcmFtcylcbiAge1xuICAgICQuYWpheChcbiAgICB7XG4gICAgICB0eXBlOiBcIkRFTEVURVwiLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwicmVmZXJlbmNlcy9cIiArIHBhcmFtcy5yaWQsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbigpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBkZWxldGUgYSByZW1vdGUgc3NoIHNlc3Npb24gZnJvbSB0aGUgU2x5Y2F0IHNlcnZlclxuICAgKiBAcGFyYW0gcGFyYW1zOiBvYmplY3R7XG4gICAqIHNpZDogc2Vzc2lvbiBpZCBvZiBvcGVuIHNlc3Npb24gdGhhdCBpcyB0byBiZSBkZWxldGVkIGZyb20gU2x5Y2F0XG4gICAqIHN1Y2Nlc3MoKTogZnVuY3Rpb24gY2FsbGVkIHVwb24gc3VjY2Vzc1xuICAgKiBlcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpOiBmdW5jdGlvbiBjYWxsZWQgdXBvbiBlcnJvclxuICAgKiB9XG4gICAqL1xuICBtb2R1bGUuZGVsZXRlX3JlbW90ZSA9IGZ1bmN0aW9uKHBhcmFtcylcbiAge1xuICAgICQuYWpheChcbiAgICB7XG4gICAgICB0eXBlOiBcIkRFTEVURVwiLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwicmVtb3Rlcy9cIiArIHBhcmFtcy5zaWQsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbigpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBkZWxldGUgYSB0ZW1wIHVwbG9hZCBmaWxlIGZyb20gdGhlIHNseWNhdCBzZXJ2ZXJcbiAgICogZ2VuZXJhbGx5IHlvdSB3b3VsZCBjYWxsIHRoaXMgaWYgdGhlcmUgd2FzIGFuIGVycm9yIGluIHRoZSB1cGxvYWQgb3JcbiAgICogaWYgdGhlIGZpbGUgd2FzIHN1Y2Nlc3NmdWxseSB1cGxvYWRlZCBmb3IgY2xlYW51cCBwdXJwb3Nlcy4gbm90ZSB0aGF0XG4gICAqIFVwbG9hZHMgYXJlIGNvbnNpZGVyZWQgdGVtcG9yYXJ5IGFuZCBvbmx5IHNob3VsZCBiZSB1c2VkIGFzIGEgbWVhbiB0b1xuICAgKiB0cmFuc3BvcnQgZmlsZXMgdG8gdGhlIHNlcnZlclxuICAgKiBAcGFyYW0gcGFyYW1zOiBvYmplY3R7XG4gICAqIHVpZDogdXBsb2FkIGlkIG9mIHRoZSBwYXJ0aWFsIG9yIGZ1bGx5IHVwbG9hZGVkIGZpbGUgdG8gYmUgZGVsZXRlZCBmcm9tIFNseWNhdFxuICAgKiBzdWNjZXNzKCk6IGZ1bmN0aW9uIGNhbGxlZCB1cG9uIHN1Y2Nlc3NcbiAgICogZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTogZnVuY3Rpb24gY2FsbGVkIHVwb24gZXJyb3JcbiAgICogfVxuICAgKi9cbiAgbW9kdWxlLmRlbGV0ZV91cGxvYWQgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgdHlwZTogXCJERUxFVEVcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcInVwbG9hZHMvXCIgKyBwYXJhbXMudWlkLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24oKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcygpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtczogb2JqZWN0e1xuICAgKiBzdWNjZXNzKHJlc3VsdCk6IGZ1bmN0aW9uIGNhbGxlZCB1cG9uIHN1Y2Nlc3NcbiAgICogZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTogZnVuY3Rpb24gY2FsbGVkIHVwb24gZXJyb3JcbiAgICogfVxuICAgKi9cbiAgbW9kdWxlLmdldF9jb25maWd1cmF0aW9uX21hcmtpbmdzID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgXCJjb25maWd1cmF0aW9uL21hcmtpbmdzXCIsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5nZXRfY29uZmlndXJhdGlvbl9wYXJzZXJzID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgXCJjb25maWd1cmF0aW9uL3BhcnNlcnNcIixcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgbW9kdWxlLmdldF9jb25maWd1cmF0aW9uX3N1cHBvcnRfZW1haWwgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcImNvbmZpZ3VyYXRpb24vc3VwcG9ydC1lbWFpbFwiLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24oZW1haWwpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKGVtYWlsKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgbW9kdWxlLmdldF9jb25maWd1cmF0aW9uX3JlbW90ZV9ob3N0cyA9IGZ1bmN0aW9uKHBhcmFtcylcbiAge1xuICAgICQuYWpheChcbiAgICB7XG4gICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwiY29uZmlndXJhdGlvbi9yZW1vdGUtaG9zdHNcIixcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgbW9kdWxlLmdldF9jb25maWd1cmF0aW9uX3ZlcnNpb24gPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcImNvbmZpZ3VyYXRpb24vdmVyc2lvblwiLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcyhyZXN1bHQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBtb2R1bGUuZ2V0X2NvbmZpZ3VyYXRpb25fd2l6YXJkcyA9IGZ1bmN0aW9uKHBhcmFtcylcbiAge1xuICAgICQuYWpheChcbiAgICB7XG4gICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwiY29uZmlndXJhdGlvbi93aXphcmRzXCIsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbih3aXphcmRzKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2Vzcyh3aXphcmRzKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5nZXRfY29uZmlndXJhdGlvbl9hZ2VudF9mdW5jdGlvbnMgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAkLmFqYXgoe1xuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcImNvbmZpZ3VyYXRpb24vYWdlbnQtZnVuY3Rpb25zXCIsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihmbnMpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKGZucyk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSkge1xuICAgICAgICBpZiAocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5nZXRfbW9kZWwgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcIm1vZGVscy9cIiArIHBhcmFtcy5taWQsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5nZXRfbW9kZWxfZmlsZSA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICQuYWpheCh7XG4gICAgICB0eXBlOiAnR0VUJyxcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyAnbW9kZWxzLycgKyBwYXJhbXMubWlkICsgJy9maWxlcy8nICsgcGFyYW1zLmFpZCxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKGNvbnRlbnQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUuZ2V0X21vZGVsX2FycmF5c2V0X21ldGFkYXRhID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgdmFyIHNlYXJjaCA9IHt9O1xuICAgIGlmKHBhcmFtcy5hcnJheXMpXG4gICAgICBzZWFyY2guYXJyYXlzID0gcGFyYW1zLmFycmF5cztcbiAgICBpZihwYXJhbXMuc3RhdGlzdGljcylcbiAgICAgIHNlYXJjaC5zdGF0aXN0aWNzID0gcGFyYW1zLnN0YXRpc3RpY3M7XG4gICAgaWYocGFyYW1zLnVuaXF1ZSlcbiAgICAgIHNlYXJjaC51bmlxdWUgPSBwYXJhbXMudW5pcXVlO1xuXG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICB1cmw6IFVSSShzZXJ2ZXJfcm9vdCArIFwibW9kZWxzL1wiICsgcGFyYW1zLm1pZCArIFwiL2FycmF5c2V0cy9cIiArIHBhcmFtcy5haWQgKyBcIi9tZXRhZGF0YVwiKS5zZWFyY2goc2VhcmNoKS50b1N0cmluZygpLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcyhyZXN1bHQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH07XG5cbiAgbW9kdWxlLmdldF9tb2RlbF9hcnJheXNldF9kYXRhID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICB1cmw6IFVSSShzZXJ2ZXJfcm9vdCArIFwibW9kZWxzL1wiICsgcGFyYW1zLm1pZCArIFwiL2FycmF5c2V0cy9cIiArIHBhcmFtcy5haWQgKyBcIi9kYXRhXCIpLnNlYXJjaCh7XCJoeXBlcmNodW5rc1wiOnBhcmFtcy5oeXBlcmNodW5rc30pLnRvU3RyaW5nKCksXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUuZ2V0X21vZGVsX2NvbW1hbmQgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgIHVybDogVVJJKHNlcnZlcl9yb290ICsgXCJtb2RlbHMvXCIgKyBwYXJhbXMubWlkICsgXCIvY29tbWFuZHMvXCIgKyBwYXJhbXMudHlwZSArIFwiL1wiICsgcGFyYW1zLmNvbW1hbmQpLnNlYXJjaChwYXJhbXMucGFyYW1ldGVycyB8fCB7fSkudG9TdHJpbmcoKSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5wb3N0X21vZGVsX2NvbW1hbmQgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICB1cmw6IFVSSShzZXJ2ZXJfcm9vdCArIFwibW9kZWxzL1wiICsgcGFyYW1zLm1pZCArIFwiL2NvbW1hbmRzL1wiICsgcGFyYW1zLnR5cGUgKyBcIi9cIiArIHBhcmFtcy5jb21tYW5kKS5zZWFyY2gocGFyYW1zLnBhcmFtZXRlcnMgfHwge30pLnRvU3RyaW5nKCksXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUucG9zdF9zZW5zaXRpdmVfbW9kZWxfY29tbWFuZCA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICQuYWpheCh7XG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcIm1vZGVscy9cIiArIHBhcmFtcy5taWQgKyBcIi9zZW5zaXRpdmUvXCIgKyBwYXJhbXMudHlwZSArIFwiL1wiICsgcGFyYW1zLmNvbW1hbmQsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShwYXJhbXMucGFyYW1ldGVycyB8fCB7fSksXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKSB7XG4gICAgICAgIGlmKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUucHV0X21vZGVsX2NvbW1hbmQgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgdHlwZTogXCJQVVRcIixcbiAgICAgIHVybDogVVJJKHNlcnZlcl9yb290ICsgXCJtb2RlbHMvXCIgKyBwYXJhbXMubWlkICsgXCIvY29tbWFuZHMvXCIgKyBwYXJhbXMudHlwZSArIFwiL1wiICsgcGFyYW1zLmNvbW1hbmQpLnNlYXJjaChwYXJhbXMucGFyYW1ldGVycyB8fCB7fSkudG9TdHJpbmcoKSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5nZXRfbW9kZWxfcGFyYW1ldGVyID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgXCJtb2RlbHMvXCIgKyBwYXJhbXMubWlkICsgXCIvcGFyYW1ldGVycy9cIiArIHBhcmFtcy5haWQsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIG1vZHVsZS5nZXRfbW9kZWxfdGFibGVfbWV0YWRhdGEgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICBjb25zb2xlLmxvZyhcInNseWNhdC13ZWItY2xpZW50LmdldF9tb2RlbF90YWJsZV9tZXRhZGF0YSgpIGlzIGRlcHJlY2F0ZWQsIHVzZSBnZXRfbW9kZWxfYXJyYXlzZXRfbWV0YWRhdGEoKSBpbnN0ZWFkLlwiKTtcblxuICAgIHZhciB1cmwgPSBzZXJ2ZXJfcm9vdCArIFwibW9kZWxzL1wiICsgcGFyYW1zLm1pZCArIFwiL3RhYmxlcy9cIiArIHBhcmFtcy5haWQgKyBcIi9hcnJheXMvXCIgKyAocGFyYW1zLmFycmF5IHx8IFwiMFwiKSArIFwiL21ldGFkYXRhXCI7XG4gICAgaWYocGFyYW1zLmluZGV4KVxuICAgICAgdXJsICs9IFwiP2luZGV4PVwiICsgcGFyYW1zLmluZGV4O1xuXG4vLyAgICAvL290aGVyIHNlY3Rpb25cbi8vICAgIHZhciBuZXdfdXJsID0gc2VydmVyX3Jvb3QgKyBcIm1vZGVscy9cIiArIHBhcmFtcy5taWQgKyBcIi9hcnJheXNldHMvXCIgKyBwYXJhbXMuYWlkICsgIFwiL21ldGFkYXRhP2FycmF5cz1cIiArIChwYXJhbXMuYXJyYXkgfHwgXCIwXCIpICsgXCIlM2IxJlwiICtcInN0YXRpc3RpY3M9MFwiO1xuLy8vLyAgICBpZihwYXJhbXMuaW5kZXgpXG4vLy8vICAgICAgbmV3X3VybCArPSBcIj9pbmRleD1cIiArIHBhcmFtcy5pbmRleDtcbi8vICAgICQuYWpheChcbi8vICAgIHtcbi8vICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuLy8gICAgICB0eXBlOiBcIkdFVFwiLFxuLy8gICAgICB1cmw6IG5ld191cmwsXG4vLyAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdClcbi8vICAgICAge1xuLy8gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuLy8gICAgICAgICAgY29uc29sZS5sb2coXCJcXG5ORVc6ICBcIiArIG5ld191cmwgKyBcIlxcblwiICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSArXCJcXG5cIik7XG4vLyAgICAgICAgICAvL3BhcmFtcy5zdWNjZXNzKHJlc3VsdCk7XG4vLyAgICAgIH0sXG4vLyAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpXG4vLyAgICAgIHtcbi8vICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4vLyAgICAgICAgICBjb25zb2xlLmxvZyhcIlxcbk5FVzogIFwiICsgdXJsICsgXCJcXG5cIiArIHJlcXVlc3QgKyByZWFzb25fcGhyYXNlICsgc3RhdHVzICtcIlxcblwiKTtcbi8vICAgICAgICAgIC8vcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4vLyAgICAgIH0sXG4vLyAgICB9KTtcbi8vICAgIC8vRU5EIG90aGVyIHNlY3Rpb25cblxuXG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlxcbk9MRDogIFwiICsgdXJsICsgXCJcXG5cIiArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCkgK1wiXFxuXCIpO1xuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIG1vZHVsZS5nZXRfcHJvamVjdF9yZWZlcmVuY2VzID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgXCJwcm9qZWN0cy9cIiArIHBhcmFtcy5waWQgKyBcIi9yZWZlcmVuY2VzXCIsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZWZlcmVuY2VzKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcyhyZWZlcmVuY2VzKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBtb2R1bGUuZ2V0X3JlbW90ZXMgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcInJlbW90ZXMvXCIgKyBwYXJhbXMuaG9zdG5hbWUsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5nZXRfcmVtb3RlX3ZpZGVvX3N0YXR1cyA9IGZ1bmN0aW9uKHBhcmFtcylcbiAge1xuICAgICQuYWpheChcbiAgICB7XG4gICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwicmVtb3Rlcy9cIiArIHBhcmFtcy5zaWQgKyBcIi92aWRlb3MvXCIgKyBwYXJhbXMudnNpZCArIFwiL3N0YXR1c1wiLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24obWV0YWRhdGEpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKG1ldGFkYXRhKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBtb2R1bGUuZ2V0X3VzZXIgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcInVzZXJzL1wiICsgKHBhcmFtcy51aWQgfHwgXCItXCIpLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24odXNlcilcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3ModXNlcik7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIG1vZHVsZS5wb3N0X2V2ZW50ID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwiZXZlbnRzL1wiICsgcGFyYW1zLnBhdGgsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbigpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIG1vZHVsZS5wb3N0X21vZGVsX2ZpbGVzID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgdmFyIGRhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBkYXRhLmFwcGVuZChcImlucHV0XCIsIHBhcmFtcy5pbnB1dCA/IHRydWU6IGZhbHNlKTtcbiAgICBkYXRhLmFwcGVuZChcInBhcnNlclwiLCBwYXJhbXMucGFyc2VyKTtcbiAgICBkYXRhLmFwcGVuZChcImFpZHNcIiwgcGFyYW1zLmFpZHMpO1xuICAgIGlmKHBhcmFtcy5zaWRzICYmIHBhcmFtcy5wYXRocylcbiAgICB7XG4gICAgICBkYXRhLmFwcGVuZChcInNpZHNcIiwgcGFyYW1zLnNpZHMpO1xuICAgICAgZGF0YS5hcHBlbmQoXCJwYXRoc1wiLCBwYXJhbXMucGF0aHMpO1xuICAgIH1cbiAgICBlbHNlIGlmKHBhcmFtcy5maWxlcylcbiAgICB7XG4gICAgICBmb3IodmFyIGkgPSAwOyBpICE9IHBhcmFtcy5maWxlcy5sZW5ndGg7ICsraSlcbiAgICAgICAgZGF0YS5hcHBlbmQoXCJmaWxlc1wiLCBwYXJhbXMuZmlsZXNbaV0pO1xuICAgIH1cblxuICAgICQuYWpheChcbiAgICB7XG4gICAgICBjb250ZW50VHlwZTogZmFsc2UsXG4gICAgICBwcm9jZXNzRGF0YTogZmFsc2UsXG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgXCJtb2RlbHMvXCIgKyBwYXJhbXMubWlkICsgXCIvZmlsZXNcIixcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MoKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgbW9kdWxlLnBvc3RfbW9kZWxfZmluaXNoID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwibW9kZWxzL1wiICsgcGFyYW1zLm1pZCArIFwiL2ZpbmlzaFwiLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24oKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcygpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUucG9zdF9wcm9qZWN0cyA9IGZ1bmN0aW9uKHBhcmFtcylcbiAge1xuICAgICQuYWpheChcbiAgICB7XG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IHBhcmFtcy5uYW1lLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHBhcmFtcy5kZXNjcmlwdGlvbiB8fCBcIlwiLFxuICAgICAgfSksXG4gICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcInByb2plY3RzXCIsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdC5pZCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5wb3N0X3Byb2plY3RfbW9kZWxzID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KFxuICAgICAge1xuICAgICAgICBcIm1vZGVsLXR5cGVcIjogcGFyYW1zLnR5cGUsXG4gICAgICAgIFwibmFtZVwiOiBwYXJhbXMubmFtZSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBwYXJhbXMuZGVzY3JpcHRpb24gfHwgXCJcIixcbiAgICAgICAgXCJtYXJraW5nXCI6IHBhcmFtcy5tYXJraW5nIHx8IFwiXCIsXG4gICAgICB9KSxcbiAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwicHJvamVjdHMvXCIgKyBwYXJhbXMucGlkICsgXCIvbW9kZWxzXCIsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdC5pZCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5wb3N0X3Byb2plY3RfcmVmZXJlbmNlcyA9IGZ1bmN0aW9uKHBhcmFtcylcbiAge1xuICAgIHZhciBkYXRhID0ge307XG4gICAgZGF0YS5uYW1lID0gcGFyYW1zLm5hbWU7XG4gICAgaWYoXCJtb2RlbC10eXBlXCIgaW4gcGFyYW1zKVxuICAgICAgZGF0YVtcIm1vZGVsLXR5cGVcIl0gPSBwYXJhbXNbXCJtb2RlbC10eXBlXCJdO1xuICAgIGlmKFwibWlkXCIgaW4gcGFyYW1zKVxuICAgICAgZGF0YS5taWQgPSBwYXJhbXMubWlkO1xuICAgIGlmKFwiYmlkXCIgaW4gcGFyYW1zKVxuICAgICAgZGF0YS5iaWQgPSBwYXJhbXMuYmlkO1xuXG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgXCJwcm9qZWN0cy9cIiArIHBhcmFtcy5waWQgKyBcIi9yZWZlcmVuY2VzXCIsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdC5pZCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBwdXQgYSByZWZlcmVuY2UgaW4gU2x5Y2F0XG4gICAqIEBwYXJhbSBwYXJhbXM6IG9iamVjdHtcbiAgICogcmlkOiByZWZlcmVuY2UgaWQgb2YgcmVmZXJlbmNlIHRoYXQgaXMgdG8gYmUgdXBkYXRlZFxuICAgKiBzdWNjZXNzKCk6IGZ1bmN0aW9uIGNhbGxlZCB1cG9uIHN1Y2Nlc3NcbiAgICogZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTogZnVuY3Rpb24gY2FsbGVkIHVwb24gZXJyb3JcbiAgICogfVxuICAgKi9cbiAgbW9kdWxlLnB1dF9yZWZlcmVuY2UgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICB2YXIgZGF0YSA9IHt9O1xuICAgIGlmKFwibmFtZVwiIGluIHBhcmFtcylcbiAgICAgIGRhdGFbXCJuYW1lXCJdID0gcGFyYW1zW1wibmFtZVwiXTtcbiAgICBpZihcImJpZFwiIGluIHBhcmFtcylcbiAgICAgIGRhdGFbXCJiaWRcIl0gPSBwYXJhbXNbXCJiaWRcIl07XG5cbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICB0eXBlOiBcIlBVVFwiLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwicmVmZXJlbmNlcy9cIiArIHBhcmFtcy5yaWQsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbigpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5wb3N0X3JlbW90ZXMgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoXG4gICAgICB7XG4gICAgICAgIGhvc3RuYW1lOiBwYXJhbXMuaG9zdG5hbWUsXG4gICAgICAgIHVzZXJuYW1lOiBwYXJhbXMudXNlcm5hbWUsXG4gICAgICAgIHBhc3N3b3JkOiBwYXJhbXMucGFzc3dvcmQsXG4gICAgICAgIGFnZW50OiBwYXJhbXMuYWdlbnQgIT09IHVuZGVmaW5lZCA/IHBhcmFtcy5hZ2VudCA6IG51bGxcbiAgICAgIH0pLFxuICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgXCJyZW1vdGVzXCIsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdC5zaWQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUuZ2V0X3Nlc3Npb25fc3RhdHVzID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgJC5hamF4KHtcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB0eXBlOiAnR0VUJyxcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyAncmVtb3Rlcy8nK3BhcmFtcy5ob3N0bmFtZSsnL3Nlc3Npb24tc3RhdHVzJyxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBpZiAocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgbW9kdWxlLnBvc3RfcmVtb3RlX2xhdW5jaCA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICQuYWpheCh7XG4gICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBjb21tYW5kOiBwYXJhbXMuY29tbWFuZFxuICAgICAgfSksXG4gICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgJ3JlbW90ZXMvJytwYXJhbXMuaG9zdG5hbWUrJy9sYXVuY2gnLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIGlmIChwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcyhyZXN1bHQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUucG9zdF9zdWJtaXRfYmF0Y2ggPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAkLmFqYXgoe1xuICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZmlsZW5hbWU6IHBhcmFtcy5maWxlbmFtZVxuICAgICAgfSksXG4gICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgJ3JlbW90ZXMvJytwYXJhbXMuaG9zdG5hbWUrJ3N1Ym1pdC1iYXRjaCcsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSkge1xuICAgICAgICBpZiAocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5nZXRfY2hlY2tqb2IgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAkLmFqYXgoe1xuICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArICdyZW1vdGVzL2NoZWNram9iLycrcGFyYW1zLmhvc3RuYW1lK1wiL1wiK3BhcmFtcy5qaWQsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSkge1xuICAgICAgICBpZiAocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5kZWxldGVfam9iID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgJC5hamF4KHtcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB0eXBlOiAnREVMRVRFJyxcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyAncmVtb3Rlcy9kZWxldGUtam9iLycrcGFyYW1zLmhvc3RuYW1lKycvJytwYXJhbXMuamlkLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIGlmIChwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcyhyZXN1bHQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUuZ2V0X2pvYl9vdXRwdXQgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAkLmFqYXgoe1xuICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArICdyZW1vdGVzL2dldC1qb2Itb3V0cHV0LycrcGFyYW1zLmhvc3RuYW1lK1wiL1wiK3BhcmFtcy5qaWQrXCIvcGF0aFwiK3BhcmFtcy5wYXRoLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIGlmIChwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcyhyZXN1bHQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUuZ2V0X3VzZXJfY29uZmlnID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgJC5hamF4KHtcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB0eXBlOiAnR0VUJyxcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyAncmVtb3Rlcy8nK3BhcmFtcy5ob3N0bmFtZSsnL2dldC11c2VyLWNvbmZpZycsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSkge1xuICAgICAgICBpZiAocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5zZXRfdXNlcl9jb25maWcgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAkLmFqYXgoe1xuICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgY29uZmlnOiBwYXJhbXMuY29uZmlnXG4gICAgICB9KSxcbiAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyAncmVtb3Rlcy8nK3BhcmFtcy5ob3N0bmFtZSsnL3NldC11c2VyLWNvbmZpZycsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKHJlc3VsdCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSkge1xuICAgICAgICBpZiAocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5wb3N0X2FnZW50X2Z1bmN0aW9uID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgJC5hamF4KHtcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHdja2V5OiBwYXJhbXMud2NrZXksXG4gICAgICAgIG5ub2RlczogcGFyYW1zLm5ub2RlcyxcbiAgICAgICAgcGFydGl0aW9uOiBwYXJhbXMucGFydGl0aW9uLFxuICAgICAgICBudGFza3NfcGVyX25vZGU6IHBhcmFtcy5udGFza3NfcGVyX25vZGUsXG4gICAgICAgIG50YXNrczogcGFyYW1zLm50YXNrcyxcbiAgICAgICAgbmNwdV9wZXJfdGFzazogcGFyYW1zLm5jcHVfcGVyX3Rhc2ssXG4gICAgICAgIHRpbWVfaG91cnM6IHBhcmFtcy50aW1lX2hvdXJzLFxuICAgICAgICB0aW1lX21pbnV0ZXM6IHBhcmFtcy50aW1lX21pbnV0ZXMsXG4gICAgICAgIHRpbWVfc2Vjb25kczogcGFyYW1zLnRpbWVfc2Vjb25kcyxcbiAgICAgICAgZm46IHBhcmFtcy5mbixcbiAgICAgICAgZm5fcGFyYW1zOiBwYXJhbXMuZm5fcGFyYW1zLFxuICAgICAgICB1aWQ6IHBhcmFtcy51aWRcbiAgICAgIH0pLFxuICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArICdyZW1vdGVzLycrcGFyYW1zLmhvc3RuYW1lKycvcnVuLWFnZW50LWZ1bmN0aW9uJyxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcyhyZXNwb25zZSk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSkge1xuICAgICAgICBpZiAocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG5cbiAgbW9kdWxlLnBvc3RfcmVtb3RlX2Jyb3dzZSA9IGZ1bmN0aW9uKHBhcmFtcylcbiAge1xuICAgICQuYWpheChcbiAgICB7XG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShcbiAgICAgIHtcbiAgICAgIH0pLFxuICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgXCJyZW1vdGVzL1wiICsgcGFyYW1zLmhvc3RuYW1lICsgXCIvYnJvd3NlXCIgKyBwYXJhbXMucGF0aCxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgbW9kdWxlLnBvc3RfdXBsb2FkcyA9IGZ1bmN0aW9uKHBhcmFtcylcbiAge1xuICAgICQuYWpheChcbiAgICB7XG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShcbiAgICAgIHtcbiAgICAgICAgXCJtaWRcIjogcGFyYW1zLm1pZCxcbiAgICAgICAgXCJpbnB1dFwiOiBwYXJhbXMuaW5wdXQsXG4gICAgICAgIFwicGFyc2VyXCI6IHBhcmFtcy5wYXJzZXIsXG4gICAgICAgIFwiYWlkc1wiOiBwYXJhbXMuYWlkc1xuICAgICAgfSksXG4gICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcInVwbG9hZHNcIixcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MocmVzdWx0LmlkKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgbW9kdWxlLnBvc3RfbG9nID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KFxuICAgICAge1xuICAgICAgICBcIm1lc3NhZ2VcIjogcGFyYW1zLm1lc3NhZ2VcbiAgICAgIH0pLFxuICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgXCJsb2dcIixcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MoKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgbW9kdWxlLnBvc3RfdXBsb2FkX2ZpbmlzaGVkID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KFxuICAgICAge1xuICAgICAgICBcInVwbG9hZGVkXCI6IHBhcmFtcy51cGxvYWRlZFxuICAgICAgfSksXG4gICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcInVwbG9hZHMvXCIgKyBwYXJhbXMudWlkICsgXCIvZmluaXNoZWRcIixcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MoKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgbW9kdWxlLnB1dF9tb2RlbF9pbnB1dHMgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoXG4gICAgICB7XG4gICAgICAgIHNpZDogcGFyYW1zLnNpZCxcbiAgICAgICAgXCJkZWVwLWNvcHlcIjogcGFyYW1zW1wiZGVlcC1jb3B5XCJdIHx8IGZhbHNlXG4gICAgICB9KSxcbiAgICAgIHR5cGU6IFwiUFVUXCIsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgXCJtb2RlbHMvXCIgKyBwYXJhbXMubWlkICsgXCIvaW5wdXRzXCIsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbigpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHBhcmFtcy5zdWNjZXNzKCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSlcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLmVycm9yKVxuICAgICAgICAgIHBhcmFtcy5lcnJvcihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIG1vZHVsZS5wdXRfbW9kZWxfcGFyYW1ldGVyID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KFxuICAgICAge1xuICAgICAgICB2YWx1ZTogcGFyYW1zLnZhbHVlLFxuICAgICAgICBpbnB1dDogcGFyYW1zLmlucHV0ID09PSB1bmRlZmluZWQgPyB0cnVlOiBwYXJhbXMuaW5wdXQgPyB0cnVlOiBmYWxzZVxuICAgICAgfSksXG4gICAgICB0eXBlOiBcIlBVVFwiLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwibW9kZWxzL1wiICsgcGFyYW1zLm1pZCArIFwiL3BhcmFtZXRlcnMvXCIgKyBwYXJhbXMuYWlkLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24oKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcygpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUucHV0X3Byb2plY3QgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICB2YXIgcHJvamVjdCA9IHt9O1xuICAgIGlmKFwibmFtZVwiIGluIHBhcmFtcylcbiAgICAgIHByb2plY3QubmFtZSA9IHBhcmFtcy5uYW1lO1xuICAgIGlmKFwiZGVzY3JpcHRpb25cIiBpbiBwYXJhbXMpXG4gICAgICBwcm9qZWN0LmRlc2NyaXB0aW9uID0gcGFyYW1zLmRlc2NyaXB0aW9uO1xuICAgIGlmKFwiYWNsXCIgaW4gcGFyYW1zKVxuICAgICAgcHJvamVjdC5hY2wgPSBwYXJhbXMuYWNsO1xuXG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHByb2plY3QpLFxuICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLFxuICAgICAgdHlwZTogXCJQVVRcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcInByb2plY3RzL1wiICsgcGFyYW1zLnBpZCxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MoKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgbW9kdWxlLmRlbGV0ZV9wcm9qZWN0X2NhY2hlID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG4gICAgJC5hamF4KFxuICAgIHtcbiAgICAgIHR5cGU6IFwiREVMRVRFXCIsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgXCJwcm9qZWN0cy9cIiArIHBhcmFtcy5waWQgKyBcIi9kZWxldGUtY2FjaGVcIixcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MoKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIGRlbGV0ZSBtb2RlbCBhcnRpZmFjdHMgZnJvbSB0aGUgbm9zcWwgZGF0YWJhc2VcbiAgICogQHBhcmFtIHBhcmFtc1xuICAgKiB7XG4gICAqICBtaWQ6bW9kZWxfaWQsXG4gICAqICBhaWQ6YXJ0aWZhY3RfaWQsXG4gICAqICBzdWNjZXNzOmZ1bmMoY2FsbGVkIG9uIGFqYXggc3VjY2VzcyksXG4gICAqICBlcnJvcjpmdW5jKGNhbGxlZCBvbiBhamF4IGVycm9yKVxuICAgKiB9XG4gICAqL1xuICBtb2R1bGUuZGVsZXRlX21vZGVsX3BhcmFtZXRlciA9IGZ1bmN0aW9uKHBhcmFtcylcbiAge1xuICAgICQuYWpheChcbiAgICB7XG4gICAgICB0eXBlOiBcIkRFTEVURVwiLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwiZGVsZXRlLWFydGlmYWN0L1wiICsgcGFyYW1zLm1pZCArIFwiL1wiICsgcGFyYW1zLmFpZCxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MoKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgbW9kdWxlLnB1dF9tb2RlbCA9IGZ1bmN0aW9uKHBhcmFtcylcbiAge1xuICAgIHZhciBtb2RlbCA9IHt9O1xuICAgIGlmKFwibmFtZVwiIGluIHBhcmFtcylcbiAgICAgIG1vZGVsLm5hbWUgPSBwYXJhbXMubmFtZTtcbiAgICBpZihcImRlc2NyaXB0aW9uXCIgaW4gcGFyYW1zKVxuICAgICAgbW9kZWwuZGVzY3JpcHRpb24gPSBwYXJhbXMuZGVzY3JpcHRpb247XG4gICAgaWYoXCJtYXJraW5nXCIgaW4gcGFyYW1zKVxuICAgICAgbW9kZWwubWFya2luZyA9IHBhcmFtcy5tYXJraW5nO1xuICAgIGlmKFwic3RhdGVcIiBpbiBwYXJhbXMpXG4gICAgICBtb2RlbC5zdGF0ZSA9IHBhcmFtcy5zdGF0ZTtcblxuICAgICQuYWpheChcbiAgICB7XG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShtb2RlbCksXG4gICAgICBwcm9jZXNzRGF0YTogZmFsc2UsXG4gICAgICB0eXBlOiBcIlBVVFwiLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwibW9kZWxzL1wiICsgcGFyYW1zLm1pZCxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKClcbiAgICAgIHtcbiAgICAgICAgaWYocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MoKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgbW9kdWxlLnB1dF91cGxvYWRfZmlsZV9wYXJ0ID0gZnVuY3Rpb24ocGFyYW1zKVxuICB7XG5cbiAgICB2YXIgZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGlmKHBhcmFtcy5ob3N0bmFtZSAmJiBwYXJhbXMucGF0aClcbiAgICB7XG4vLyAgICAgIGNvbnNvbGUubG9nKFwiaWY/IHNpZCBcIitwYXJhbXMuc2lkK1wicGF0aCBcIitwYXJhbXMucGF0aCtcImZpbGUgXCIrcGFyYW1zLmZpbGUpO1xuICAgICAgZGF0YS5hcHBlbmQoXCJob3N0bmFtZVwiLCBwYXJhbXMuaG9zdG5hbWUpO1xuICAgICAgZGF0YS5hcHBlbmQoXCJwYXRoXCIsIHBhcmFtcy5wYXRoKTtcbiAgICB9XG4gICAgZWxzZSBpZihwYXJhbXMuZmlsZSlcbiAgICB7XG4vLyAgICAgIGNvbnNvbGUubG9nKFwiaWYgZWxzZT8gc2lkIFwiK3BhcmFtcy5zaWQrXCJwYXRoIFwiK3BhcmFtcy5wYXRoK1wiZmlsZSBcIitwYXJhbXMuZmlsZSk7XG4gICAgICBkYXRhLmFwcGVuZChcImZpbGVcIiwgcGFyYW1zLmZpbGUpO1xuICAgIH1cblxuICAgICQuYWpheChcbiAgICB7XG4gICAgICBjb250ZW50VHlwZTogZmFsc2UsXG4gICAgICBwcm9jZXNzRGF0YTogZmFsc2UsXG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgdHlwZTogXCJQVVRcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcInVwbG9hZHMvXCIgKyBwYXJhbXMudWlkICsgXCIvZmlsZXMvXCIgKyBwYXJhbXMuZmlkICsgXCIvcGFydHMvXCIgKyBwYXJhbXMucGlkLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24oKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcygpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUuc2lnbl9vdXQgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoXG4gICAge1xuICAgICAgdHlwZTogXCJERUxFVEVcIixcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyBcImxvZ291dFwiLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24oKVxuICAgICAge1xuICAgICAgICBpZihwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcygpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpXG4gICAgICB7XG4gICAgICAgIGlmKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUuam9iX3RpbWUgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoe1xuICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArICdyZW1vdGVzLycrcGFyYW1zLm5vZGVzK1wiL1wiK3BhcmFtcy50YXNrcytcIi9cIitwYXJhbXMuc2l6ZStcIi9qb2ItdGltZVwiLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIGlmIChwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcyhyZXN1bHQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgXG4gIG1vZHVsZS5nZXRfdGltZV9zZXJpZXNfbmFtZXMgPSBmdW5jdGlvbihwYXJhbXMpXG4gIHtcbiAgICAkLmFqYXgoe1xuICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArIFwicmVtb3Rlcy9cIiArIHBhcmFtcy5ob3N0bmFtZSArIFwiL3RpbWVfc2VyaWVzX25hbWVzL2ZpbGVcIiArIHBhcmFtcy5wYXRoLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJyZXN1bHQgXCIrSlNPTi5zdHJpbmdpZnkocmVzdWx0KSlcbiAgICAgICAgaWYgKHBhcmFtcy5zdWNjZXNzKVxuICAgICAgICAgIHJldHVybiBwYXJhbXMuc3VjY2VzcyhyZXN1bHQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUuZ2V0X3Byb2plY3QgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAkLmFqYXgoe1xuICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBzZXJ2ZXJfcm9vdCArICdwcm9qZWN0cy8nICsgcGFyYW1zLnBpZCxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBpZiAocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgbW9kdWxlLmdldF9wcm9qZWN0cyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICQuYWpheCh7XG4gICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICB1cmw6IHNlcnZlcl9yb290ICsgJ3Byb2plY3RzX2xpc3QnLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIGlmIChwYXJhbXMuc3VjY2VzcylcbiAgICAgICAgICBwYXJhbXMuc3VjY2VzcyhyZXN1bHQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIHJlYXNvbl9waHJhc2UpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5lcnJvcilcbiAgICAgICAgICBwYXJhbXMuZXJyb3IocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUuZ2V0X3Byb2plY3RfbW9kZWxzID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgJC5hamF4KHtcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB0eXBlOiAnR0VUJyxcbiAgICAgIHVybDogc2VydmVyX3Jvb3QgKyAncHJvamVjdHMvJysgcGFyYW1zLnBpZCArICcvbW9kZWxzJyxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBpZiAocGFyYW1zLnN1Y2Nlc3MpXG4gICAgICAgICAgcGFyYW1zLnN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCByZWFzb25fcGhyYXNlKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZXJyb3IpXG4gICAgICAgICAgcGFyYW1zLmVycm9yKHJlcXVlc3QsIHN0YXR1cywgcmVhc29uX3BocmFzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBtb2R1bGU7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./web-server/js/slycat-web-client-webpack.js\n");

/***/ })

}]);